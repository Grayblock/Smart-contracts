{
  "version": "3.2",
  "log": [
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2531_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2260_storage"
                }
              ]
            },
            "t_struct(Set)2260_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "3d489b17cd0ea5f0d6540be727c2d83e5c25233f249d1288fc9e1a0558bcc498",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts\\IDO.sol:12",
        "version": {
          "withMetadata": "84f7705ed454276436acdab759697ebd043a60801a4fb098affcd3016cffab03",
          "withoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e",
          "linkedWithoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts\\IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts\\IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1339": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts\\SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "eff6f5d02c32de8f2ec1c7e8c6a81658724d9b2e47a7c51d14fe50952078570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts\\Staking.sol:15",
        "version": {
          "withMetadata": "a82ede5e88eff9dd1d17171c66423e636d1659de1932f4f0b432f8d80a3e800e",
          "withoutMetadata": "c338c672517a1aca59c8d7a23473bb82abeee0a766f740a33f218574ca2b8b87",
          "linkedWithoutMetadata": "c338c672517a1aca59c8d7a23473bb82abeee0a766f740a33f218574ca2b8b87"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeMath",
          "IterableMapping"
        ],
        "methods": [
          "(address,address,address)",
          "putTradedToken(uint256)",
          "stake(uint256)",
          "unStake(uint256)",
          "updateAllocation(uint256)",
          "claimReward()",
          "getReward()",
          "setFeeCollector(address)",
          "setFeeBps(uint256)",
          "setLockTime(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1405,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1576,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1991,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3216,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts\\Staking.sol:63"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockTime",
            "src": "contracts\\Staking.sol:52"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/libs/IterableMapping.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "tradedToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:40"
            },
            {
              "contract": "GrayblockStaking",
              "label": "projectToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:43"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeCollector",
              "type": "t_address",
              "src": "contracts\\Staking.sol:46"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeBps",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:49"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lockTime",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:52"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakeInfos",
              "type": "t_struct(Map)3935_storage",
              "src": "contracts\\Staking.sol:55"
            }
          ],
          "types": {
            "t_contract(IERC20)1417": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Map)3935_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_struct(StakeInfo)3918_storage)"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_struct(StakeInfo)3918_storage)": {
              "label": "mapping(address => struct IterableMapping.StakeInfo)"
            },
            "t_struct(StakeInfo)3918_storage": {
              "label": "struct IterableMapping.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts\\Token.sol:9",
        "version": {
          "withMetadata": "6e7873826fd871882a6805e1f2679f30eda4cd7f8904c28f806c0ceff6a6d5b7",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts\\Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IterableMapping": {
        "src": "contracts\\libs\\IterableMapping.sol:5",
        "version": {
          "withMetadata": "1f78d888add68f16ae428e0e6cd60b339159a93c932ca1950e5a832832970bbe",
          "withoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca",
          "linkedWithoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "add(IterableMapping.Map storage,address,(uint256,uint256,uint256))",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2531_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2260_storage"
                }
              ]
            },
            "t_struct(Set)2260_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "3d489b17cd0ea5f0d6540be727c2d83e5c25233f249d1288fc9e1a0558bcc498",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts\\IDO.sol:12",
        "version": {
          "withMetadata": "84f7705ed454276436acdab759697ebd043a60801a4fb098affcd3016cffab03",
          "withoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e",
          "linkedWithoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts\\IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts\\IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1339": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts\\SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "eff6f5d02c32de8f2ec1c7e8c6a81658724d9b2e47a7c51d14fe50952078570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts\\Staking.sol:15",
        "version": {
          "withMetadata": "61d797deafae41f1ea903709c83d0c8448699b9bb7815550b2ed0d6deca698be",
          "withoutMetadata": "77c98713df23653d8b5bba6b33fbf56dd99d47476f34a3e7ac14ed70b0f36b88",
          "linkedWithoutMetadata": "77c98713df23653d8b5bba6b33fbf56dd99d47476f34a3e7ac14ed70b0f36b88"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeMath",
          "IterableMapping"
        ],
        "methods": [
          "(address,address,address)",
          "putTradedToken(uint256)",
          "stake(uint256)",
          "unStake(uint256)",
          "updateAllocation()",
          "claimReward()",
          "getReward()",
          "setFeeCollector(address)",
          "setFeeBps(uint256)",
          "setLockTime(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1158,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1716,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1887,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3059,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts\\Staking.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockTime",
            "src": "contracts\\Staking.sol:52"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/libs/IterableMapping.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "tradedToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:40"
            },
            {
              "contract": "GrayblockStaking",
              "label": "projectToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:43"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeCollector",
              "type": "t_address",
              "src": "contracts\\Staking.sol:46"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeBps",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:49"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lockTime",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:52"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalProjectTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:55"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakeInfos",
              "type": "t_struct(Map)3935_storage",
              "src": "contracts\\Staking.sol:58"
            }
          ],
          "types": {
            "t_contract(IERC20)1417": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Map)3935_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_struct(StakeInfo)3918_storage)"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_struct(StakeInfo)3918_storage)": {
              "label": "mapping(address => struct IterableMapping.StakeInfo)"
            },
            "t_struct(StakeInfo)3918_storage": {
              "label": "struct IterableMapping.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts\\Token.sol:9",
        "version": {
          "withMetadata": "6e7873826fd871882a6805e1f2679f30eda4cd7f8904c28f806c0ceff6a6d5b7",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts\\Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IterableMapping": {
        "src": "contracts\\libs\\IterableMapping.sol:5",
        "version": {
          "withMetadata": "1f78d888add68f16ae428e0e6cd60b339159a93c932ca1950e5a832832970bbe",
          "withoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca",
          "linkedWithoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "add(IterableMapping.Map storage,address,(uint256,uint256,uint256))",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2531_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2531_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2260_storage"
                }
              ]
            },
            "t_struct(Set)2260_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:15",
        "version": {
          "withMetadata": "3d489b17cd0ea5f0d6540be727c2d83e5c25233f249d1288fc9e1a0558bcc498",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts\\IDO.sol:12",
        "version": {
          "withMetadata": "84f7705ed454276436acdab759697ebd043a60801a4fb098affcd3016cffab03",
          "withoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e",
          "linkedWithoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts\\IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1339",
              "src": "contracts\\IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts\\IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1339": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts\\SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "eff6f5d02c32de8f2ec1c7e8c6a81658724d9b2e47a7c51d14fe50952078570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts\\Staking.sol:15",
        "version": {
          "withMetadata": "83dd51505502bd0ac116460fe510c47019e1c30c5d790ce9df7e3f97ccaf8f21",
          "withoutMetadata": "0ccfc6f9d98e0a442945f6ded6a6d016566aa8019004cf2e14f8a989ff38f507",
          "linkedWithoutMetadata": "0ccfc6f9d98e0a442945f6ded6a6d016566aa8019004cf2e14f8a989ff38f507"
        },
        "inherit": [
          "Ownable",
          "Context",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeMath",
          "IterableMapping"
        ],
        "methods": [
          "(address,address,address)",
          "putTradedToken(uint256)",
          "stake(uint256)",
          "unStake(uint256)",
          "updateAllocation()",
          "claimReward()",
          "getReward()",
          "setFeeCollector(address)",
          "setFeeBps(uint256)",
          "setLockTime(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1158,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1720,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 1891,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          },
          {
            "src": "contracts/libs/IterableMapping.sol",
            "name": "IterableMapping",
            "length": 20,
            "start": 3070,
            "placeholder": "__$55b008388ae88b5ad7d10989d1583a79e8$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts\\Staking.sol:66"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lockTime",
            "src": "contracts\\Staking.sol:52"
          },
          {
            "kind": "external-library-linking",
            "name": "IterableMapping",
            "src": "contracts/libs/IterableMapping.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "tradedToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:40"
            },
            {
              "contract": "GrayblockStaking",
              "label": "projectToken",
              "type": "t_contract(IERC20)1417",
              "src": "contracts\\Staking.sol:43"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeCollector",
              "type": "t_address",
              "src": "contracts\\Staking.sol:46"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeBps",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:49"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lockTime",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:52"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalProjectTokenBalance",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:55"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakeInfos",
              "type": "t_struct(Map)3941_storage",
              "src": "contracts\\Staking.sol:58"
            }
          ],
          "types": {
            "t_contract(IERC20)1417": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Map)3941_storage": {
              "label": "struct IterableMapping.Map",
              "members": [
                {
                  "label": "keys",
                  "type": "t_array(t_address)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_mapping(t_address,t_struct(StakeInfo)3924_storage)"
                },
                {
                  "label": "indexOf",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "inserted",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_struct(StakeInfo)3924_storage)": {
              "label": "mapping(address => struct IterableMapping.StakeInfo)"
            },
            "t_struct(StakeInfo)3924_storage": {
              "label": "struct IterableMapping.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "stakedTime",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts\\Token.sol:9",
        "version": {
          "withMetadata": "6e7873826fd871882a6805e1f2679f30eda4cd7f8904c28f806c0ceff6a6d5b7",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts\\Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IterableMapping": {
        "src": "contracts\\libs\\IterableMapping.sol:5",
        "version": {
          "withMetadata": "1f78d888add68f16ae428e0e6cd60b339159a93c932ca1950e5a832832970bbe",
          "withoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca",
          "linkedWithoutMetadata": "74df5ddbd2a6ea2b267f196c7673122d6dd355f9fc59ff6a667539c5081578ca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "get(IterableMapping.Map storage,address)",
          "getIndexOfKey(IterableMapping.Map storage,address)",
          "getKeyAtIndex(IterableMapping.Map storage,uint256)",
          "size(IterableMapping.Map storage)",
          "add(IterableMapping.Map storage,address,(uint256,uint256,uint256))",
          "remove(IterableMapping.Map storage,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Staking.sol:268",
        "version": {
          "withMetadata": "bfdaf843d62e40890ebdcdfdd4bdc644de53bd12ddc9adcaa8d27ce49302c403",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockStaking": {
        "src": "contracts\\Staking.sol:629",
        "version": {
          "withMetadata": "db15d3fe3af913d75663f4ad9ce90f33a402cdca26321321ebd020c2af30f743",
          "withoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736",
          "linkedWithoutMetadata": "d78a0bcf22d7307371d3e285d40658a8aaec0d66a2da547a9fa574dd382a2736"
        },
        "inherit": [
          "Pausable",
          "Owned",
          "ReentrancyGuard",
          "IStaking"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math",
          "console"
        ],
        "methods": [
          "(address,address,address)",
          "balanceOf(address)",
          "getDelay()",
          "getMinimumTime()",
          "getLastFee()",
          "getFee()",
          "getfeeOwner()",
          "getRewardRate()",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()",
          "setDelay(uint256)",
          "setMinimumTime(uint256)",
          "setFee(uint256)",
          "setfeeOwner(address)",
          "notifyRewardAmount(uint256)",
          "setRewardRate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockStaking",
            "src": "contracts\\Staking.sol:656"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DELAY",
            "src": "contracts\\Staking.sol:650"
          },
          {
            "kind": "state-variable-assignment",
            "name": "MINIMUMTIME",
            "src": "contracts\\Staking.sol:651"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FEE",
            "src": "contracts\\Staking.sol:652"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeOwner",
            "src": "contracts\\Staking.sol:653"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockStaking",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:635"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:636"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsDuration",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:637"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:638"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:639"
            },
            {
              "contract": "GrayblockStaking",
              "label": "lastBalance",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:640"
            },
            {
              "contract": "GrayblockStaking",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:641"
            },
            {
              "contract": "GrayblockStaking",
              "label": "LastFee",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:642"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewardsToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts\\Staking.sol:643"
            },
            {
              "contract": "GrayblockStaking",
              "label": "stakingToken",
              "type": "t_contract(IERC20)343",
              "src": "contracts\\Staking.sol:644"
            },
            {
              "contract": "GrayblockStaking",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Staking.sol:646"
            },
            {
              "contract": "GrayblockStaking",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Staking.sol:647"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Staking.sol:648"
            },
            {
              "contract": "GrayblockStaking",
              "label": "_startTime",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Staking.sol:649"
            },
            {
              "contract": "GrayblockStaking",
              "label": "DELAY",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:650"
            },
            {
              "contract": "GrayblockStaking",
              "label": "MINIMUMTIME",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:651"
            },
            {
              "contract": "GrayblockStaking",
              "label": "FEE",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:652"
            },
            {
              "contract": "GrayblockStaking",
              "label": "feeOwner",
              "type": "t_address",
              "src": "contracts\\Staking.sol:653"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)343": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\Staking.sol:194",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStaking": {
        "src": "contracts\\Staking.sol:531",
        "inherit": [],
        "libraries": [],
        "methods": [
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "getReward()",
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\Staking.sol:10",
        "version": {
          "withMetadata": "a47a08aecef49925b9abf391b76216d89ae1cfe15226e745d9c564b6c632f3ec",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Owned": {
        "src": "contracts\\Staking.sol:552",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nominateNewOwner(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts\\Staking.sol:556"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Owned",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\Staking.sol:553"
            },
            {
              "contract": "Owned",
              "label": "nominatedOwner",
              "type": "t_address",
              "src": "contracts\\Staking.sol:554"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts\\Staking.sol:588",
        "version": {
          "withMetadata": "e36d017fb53d80ce646f8cfaf604402f3e0e2f28d7c96b1d077da18b2b15ba2a",
          "withoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5",
          "linkedWithoutMetadata": "cdad3bc14fe5abc83583e12dedf675d4bec7fa645d28b1f570bba0e595d882f5"
        },
        "inherit": [
          "Owned"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setPaused(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts\\Staking.sol:592"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "lastPauseTime",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:589"
            },
            {
              "contract": "Pausable",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts\\Staking.sol:590"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts\\Staking.sol:488",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts\\Staking.sol:505"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "contracts\\Staking.sol:503"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\Staking.sol:412",
        "version": {
          "withMetadata": "7c1ebf8cc082d0e9039dc99b2751c7ad6651d62d1ee0731059533b604d1462d6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Staking.sol:48",
        "version": {
          "withMetadata": "23088502bc96b14886627f55e0c649606be9f96b243bf8fe911f9cd99c0a68e4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "22ab50c6385aa6d0c318a53d16e43dfb9bf847a5e8844a576dff317fc6f7afeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:62",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:68"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)57_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:20",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2179_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2179_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)1908_storage"
                }
              ]
            },
            "t_struct(Set)1908_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "f3773c94be9e3bebdf44415d14cd44f7d25c47278987978439a01d843fb7a378",
          "withoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69",
          "linkedWithoutMetadata": "4fe8ba2d44cc1c7d75727dd37693961a41bfb87cc948fd906b244d5bfb97aa69"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "fe2cfa4e1bc5987963be38935569cbd22a73bde36181b64b1ef65f1a27f62a18",
          "withoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4",
          "linkedWithoutMetadata": "48420b490f21e15fc56effcf8bd8bc2ba1f6497ae02b10dce7c324d901cfe6f4"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "b9a102b555263ccacc6374ea1784ba1f8e422dd968f3e4134645feb6abb9ec66",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "549e275f6d5427be9ff66fb6410a636030e947b81184f62b10ff3ddfce2fb878",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO": {
        "src": "contracts\\IDO.sol:12",
        "version": {
          "withMetadata": "84f7705ed454276436acdab759697ebd043a60801a4fb098affcd3016cffab03",
          "withoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e",
          "linkedWithoutMetadata": "fbc92292db8735b6110b0ce83cf0d8b8190003fc06a33dd29b5ba0cf4242514e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "(address,address,uint256)",
          "buy(uint256)",
          "claim()",
          "returnTokens()",
          "withdrawTokens()",
          "tokensLeft()",
          "saleStatus()",
          "getOwner()",
          "getRatio()",
          "tradedTokens()",
          "projectTokens()",
          "setRatio(uint256)",
          "startSale(uint256,uint256)",
          "setCap(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO",
            "src": "contracts\\IDO.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IDO",
              "label": "_startTimeEpoch",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:14"
            },
            {
              "contract": "IDO",
              "label": "projectToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts\\IDO.sol:15"
            },
            {
              "contract": "IDO",
              "label": "tradeToken",
              "type": "t_contract(ERC20)1299",
              "src": "contracts\\IDO.sol:16"
            },
            {
              "contract": "IDO",
              "label": "ratio",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:17"
            },
            {
              "contract": "IDO",
              "label": "cap",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:18"
            },
            {
              "contract": "IDO",
              "label": "sale",
              "type": "t_bool",
              "src": "contracts\\IDO.sol:19"
            },
            {
              "contract": "IDO",
              "label": "time",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:20"
            },
            {
              "contract": "IDO",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:21"
            },
            {
              "contract": "IDO",
              "label": "totalTokens",
              "type": "t_uint256",
              "src": "contracts\\IDO.sol:22"
            },
            {
              "contract": "IDO",
              "label": "Invested",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO.sol:23"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(ERC20)1299": {
              "label": "contract ERC20"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "contracts\\SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "eff6f5d02c32de8f2ec1c7e8c6a81658724d9b2e47a7c51d14fe50952078570d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts\\Token.sol:9",
        "version": {
          "withMetadata": "6e7873826fd871882a6805e1f2679f30eda4cd7f8904c28f806c0ceff6a6d5b7",
          "withoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151",
          "linkedWithoutMetadata": "f76f39857897028c0d0f6655879f8b66f21aca2d03c18095b8898ce235de8151"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts\\Token.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Token",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\Token.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\IBEP20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Exchange.sol:410",
        "version": {
          "withMetadata": "e331ba5db1739c99d06137df1c9accf2fd187693692d6fa42365ff9da282dabd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\Exchange.sol:590",
        "version": {
          "withMetadata": "356f916bdfb38d037a427afd077b9191cec381aba59336833ecffaf6a13b938a",
          "withoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0",
          "linkedWithoutMetadata": "2cef57f17794d9cace0c29b926bb2e40a1b73c84c4ca6c6db180b5f87ce88cb0"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string)",
          "getOwner()",
          "name()",
          "decimals()",
          "symbol()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\Exchange.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Exchange.sol:594"
            },
            {
              "contract": "BEP20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Exchange.sol:596"
            },
            {
              "contract": "BEP20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Exchange.sol:598"
            },
            {
              "contract": "BEP20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Exchange.sol:600"
            },
            {
              "contract": "BEP20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Exchange.sol:601"
            },
            {
              "contract": "BEP20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Exchange.sol:602"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\Exchange.sol:36",
        "version": {
          "withMetadata": "5e11d4e54f242e802b55d08b131cdb89da442d4e85de5d4e1f9ff734e893819f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GrayblockPool": {
        "src": "contracts\\Exchange.sol:877",
        "version": {
          "withMetadata": "5a2ae552c4aff00f2c43557e3170e04f79d46606ebeec6365257483dfa10ea0d",
          "withoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d",
          "linkedWithoutMetadata": "42bbdaaaaade9b25a0b9d8323f6cc82b3a24de1fbf8b3eb4a2df2c063e69fa0d"
        },
        "inherit": [
          "BEP20",
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Math"
        ],
        "methods": [
          "(address,address)",
          "getAmountsOut(uint256,address,address)",
          "price(uint256,uint256,uint256)",
          "swap(uint256,address,address)",
          "getRatio(uint256,uint256,uint256,uint256,uint256,uint256)",
          "depositLiquidity(uint256,uint256,uint256,uint256,address,address)",
          "withdrawLiquidity(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GrayblockPool",
            "src": "contracts\\Exchange.sol:892"
          },
          {
            "kind": "state-variable-assignment",
            "name": "LP_Cake",
            "src": "contracts\\Exchange.sol:888"
          },
          {
            "kind": "state-variable-assignment",
            "name": "WBNB",
            "src": "contracts\\Exchange.sol:890"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GrayblockPool",
              "label": "tokenA",
              "type": "t_address",
              "src": "contracts\\Exchange.sol:880"
            },
            {
              "contract": "GrayblockPool",
              "label": "tokenB",
              "type": "t_address",
              "src": "contracts\\Exchange.sol:881"
            },
            {
              "contract": "GrayblockPool",
              "label": "totalLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Exchange.sol:884"
            },
            {
              "contract": "GrayblockPool",
              "label": "liquidity",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Exchange.sol:885"
            },
            {
              "contract": "GrayblockPool",
              "label": "admins",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Exchange.sol:886"
            },
            {
              "contract": "GrayblockPool",
              "label": "LP_Cake",
              "type": "t_address",
              "src": "contracts\\Exchange.sol:888"
            },
            {
              "contract": "GrayblockPool",
              "label": "WBNB",
              "type": "t_address",
              "src": "contracts\\Exchange.sol:890"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\Exchange.sol:124",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\Exchange.sol:5",
        "version": {
          "withMetadata": "6cb130c8a9485416abe838da08b8b796b240239a86d602465d519bbd80667780",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\Exchange.sol:64",
        "version": {
          "withMetadata": "909d7050aeba9dcc8ef3fdcd142cfc7f81e4ffd5d8458b98d1b415f40573ce4a",
          "withoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08",
          "linkedWithoutMetadata": "d867b5c37838a05fb1504b6ef2f73f383a62fe2d10dabe19c719be83e63d1f08"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Exchange.sol:72"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\Exchange.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\Exchange.sol:233",
        "version": {
          "withMetadata": "6e11bf37fb09afa90a8f8325fa0748e59fa1e9815e168ed32f6d8f70382b34d3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IERC20": {
        "src": "contracts\\periphery\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts\\core\\interfaces\\IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts\\core\\interfaces\\IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\core\\interfaces\\IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\core\\interfaces\\IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts\\periphery\\interfaces\\IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\periphery\\interfaces\\IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\periphery\\interfaces\\IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\periphery\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts\\periphery\\interfaces\\V1\\IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts\\periphery\\interfaces\\V1\\IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeOracleLibrary": {
        "src": "contracts\\periphery\\libraries\\PancakeOracleLibrary.sol:6",
        "version": {
          "withMetadata": "17cb6d15acd42873902f77c11535057815f145474671ffd7a8215affb0966241",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts\\periphery\\Migrations.sol:4",
        "version": {
          "withMetadata": "463b090a45f0c126ce425635091a371946c841c139e7e21ed47963bddd3fc0f7",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts\\periphery\\Migrations.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\periphery\\Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts\\periphery\\Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts\\core\\Migration.sol:4",
        "version": {
          "withMetadata": "1b070bb20c07e3aaa6635cc77140d62a129a192eecbccc663b4fac80ccce55bb",
          "withoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e",
          "linkedWithoutMetadata": "d0a17d0bd77c8e9f0fb9f05e7ba40459c124176ccb7036a42e0c15c877b2ea5e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Migrations",
            "src": "contracts\\core\\Migration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts\\core\\Migration.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts\\core\\Migration.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeFactory": {
        "src": "contracts\\core\\interfaces\\IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\core\\interfaces\\IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeMigrator": {
        "src": "contracts\\periphery\\PancakeMigrator.sol:61",
        "version": {
          "withMetadata": "0039a275383cd216b3789fa6e0b813dd255a86d538951529271d05b5fdbdda51",
          "withoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551",
          "linkedWithoutMetadata": "c5bb839aa2a449a07a3e75d5e548e0915db4b3d08b0ca3cd7a8ab84619024551"
        },
        "inherit": [
          "IPancakeMigrator"
        ],
        "libraries": [
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeMigrator",
            "src": "contracts\\periphery\\PancakeMigrator.sol:65"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factoryV1",
            "src": "contracts\\periphery\\PancakeMigrator.sol:62"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts\\periphery\\PancakeMigrator.sol:63"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\periphery\\PancakeRouter01.sol:15",
        "version": {
          "withMetadata": "2c83bb8de1735357026fdd25127d29be5cad4321bc39a12c29bbfed54be94f02",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter": {
        "src": "contracts\\periphery\\PancakeRouter.sol:63",
        "version": {
          "withMetadata": "2056e6cad27998d776b7fd91f8300c7b569323cf529b56b39e829869b6df7171",
          "withoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f",
          "linkedWithoutMetadata": "8020df96515012e18e683f3ea42beace87dd086b064d314c6e00eef945beff2f"
        },
        "inherit": [
          "IPancakeRouter02",
          "IPancakeRouter01"
        ],
        "libraries": [
          "SafeMath",
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter",
            "src": "contracts\\periphery\\PancakeRouter.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts\\periphery\\PancakeRouter.sol:66"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts\\periphery\\PancakeRouter.sol:67"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeRouter01": {
        "src": "contracts\\periphery\\PancakeRouter01.sol:62",
        "version": {
          "withMetadata": "20e54e960fece333cbf15672b004f1c59b1fcb85b822ec19223cc9e9faa56ac5",
          "withoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a",
          "linkedWithoutMetadata": "f3587a660d2b8d1a19ee3b35002dc24549595e4924b0d95fe3e9825dac0bfb2a"
        },
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [
          "PancakeLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeRouter01",
            "src": "contracts\\periphery\\PancakeRouter01.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts\\periphery\\PancakeRouter01.sol:63"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts\\periphery\\PancakeRouter01.sol:64"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\periphery\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeMigrator": {
        "src": "contracts\\periphery\\interfaces\\IPancakeMigrator.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter01": {
        "src": "contracts\\periphery\\interfaces\\IPancakeRouter01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts\\periphery\\interfaces\\IPancakeRouter02.sol:5",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\periphery\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Exchange": {
        "src": "contracts\\periphery\\interfaces\\V1\\IUniswapV1Exchange.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "transferFrom(address,address,uint256)",
          "removeLiquidity(uint256,uint256,uint256,uint256)",
          "tokenToEthSwapInput(uint256,uint256,uint256)",
          "ethToTokenSwapInput(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV1Factory": {
        "src": "contracts\\periphery\\interfaces\\V1\\IUniswapV1Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getExchange(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeLibrary": {
        "src": "contracts\\periphery\\libraries\\PancakeLibrary.sol:7",
        "version": {
          "withMetadata": "c15b127a06b6e98e625c2d3ab383e78baab929714e7225e0364e7cc68ac378e1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\periphery\\libraries\\SafeMath.sol:5",
        "version": {
          "withMetadata": "05c37b504fdbee0e288fbdcd5e7f35265375eb77d62e4a895cea8a5d4bce0bd4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeCastMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeCastMock.sol:5",
        "version": {
          "withMetadata": "2ec49e09945f1748447061ba5f2719003c1454b0c5258ce4b6c46f947f232b19",
          "withoutMetadata": "79d736309c0e898beb9565b572340aae6d6e45480d65e5df3bd6d779292237db",
          "linkedWithoutMetadata": "79d736309c0e898beb9565b572340aae6d6e45480d65e5df3bd6d779292237db"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "toUint128(uint256)",
          "toUint64(uint256)",
          "toUint32(uint256)",
          "toUint16(uint256)",
          "toUint8(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCast": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\SafeCast.sol:21",
        "version": {
          "withMetadata": "0cbdc0f675b24b96a66b7713108cd95557d38a657bd05423359a31253767055e",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EtherReceiverMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\EtherReceiverMock.sol:3",
        "version": {
          "withMetadata": "1f794a59cf34a817dafb8d59dbab141aec8d254d95a5604d39b9f2027e92ff16",
          "withoutMetadata": "d0889a0dd7ad11b3c64c5d0e0630363510fb07dcd7ea51e15e99e802ec207a98",
          "linkedWithoutMetadata": "d0889a0dd7ad11b3c64c5d0e0630363510fb07dcd7ea51e15e99e802ec207a98"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAcceptEther(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EtherReceiverMock",
              "label": "_acceptEther",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\EtherReceiverMock.sol:4"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC165NotSupported": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165NotSupported.sol:3",
        "version": {
          "withMetadata": "6bb20703aee2ce98bb3a76ad561a621b209d405fa13d0eb236cadc63014bc071",
          "withoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0",
          "linkedWithoutMetadata": "7f2d58cc2fe2c8fb8725c9dc5086beed1e02e5e3c82f5ddf3a4ef452244d19b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "EnumerableSetMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\EnumerableSetMock.sol:5",
        "version": {
          "withMetadata": "f2aa4e42fa36888cac78e8fe2aa5d4cc998b779b5e300672c1529eeca25d34d4",
          "withoutMetadata": "98b56e88c4ab5e38b2c2d1bfcb5daf414b47a3e324a08339616a2e46311ff96b",
          "linkedWithoutMetadata": "98b56e88c4ab5e38b2c2d1bfcb5daf414b47a3e324a08339616a2e46311ff96b"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(address)",
          "add(address)",
          "remove(address)",
          "enumerate()",
          "length()",
          "get(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EnumerableSetMock",
              "label": "set",
              "type": "t_struct(AddressSet)103_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\EnumerableSetMock.sol:10"
            }
          ],
          "types": {
            "t_struct(AddressSet)103_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "index",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "values",
                  "type": "t_array(t_address)dyn_storage"
                }
              ]
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\EnumerableSet.sol:22",
        "version": {
          "withMetadata": "ee1327c8dc2421b0953a9f4c14d95d61ccf26699cdb8d333a5404f631c82e8fe",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC165Checker": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC165Checker.sol:10",
        "version": {
          "withMetadata": "a7be848a36fff4f954c527c15e4adcf404479b3c4e3b4e86e42e7438f7fef64b",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165CheckerMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165CheckerMock.sol:5",
        "version": {
          "withMetadata": "35907027f011b6f1c1abc84828f2b905f87fc798d5148cb42310f460cd2b4237",
          "withoutMetadata": "4eaf2c7e959df2bb14cdeddc0ec5f79db91638114c5f8020d6e1c365b68d3462",
          "linkedWithoutMetadata": "4eaf2c7e959df2bb14cdeddc0ec5f79db91638114c5f8020d6e1c365b68d3462"
        },
        "inherit": [],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "supportsERC165(address)",
          "supportsInterface(address,bytes4)",
          "supportsAllInterfaces(address,bytes4[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:281",
        "version": {
          "withMetadata": "0c94bd6e9c626758cb803d8ad97a27e45461ada5222dc864a820c7894e1644f4",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:986",
        "inherit": [
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Crowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:504",
        "version": {
          "withMetadata": "27ba5bf7ebb4bd808a652eafab5265084ca6e8ac440687286d97802b611db401",
          "withoutMetadata": "27ba5bf7ebb4bd808a652eafab5265084ca6e8ac440687286d97802b611db401",
          "linkedWithoutMetadata": "27ba5bf7ebb4bd808a652eafab5265084ca6e8ac440687286d97802b611db401"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(uint256,address payable,address)",
          "()",
          "token()",
          "wallet()",
          "rate()",
          "weiRaised()",
          "buyTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Crowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:540"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Crowdsale",
              "label": "_token",
              "type": "t_contract(IERC20)94",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:509"
            },
            {
              "contract": "Crowdsale",
              "label": "_wallet",
              "type": "t_address_payable",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:512"
            },
            {
              "contract": "Crowdsale",
              "label": "_rate",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:518"
            },
            {
              "contract": "Crowdsale",
              "label": "_weiRaised",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:521"
            }
          ],
          "types": {
            "t_contract(IERC20)94": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Escrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:911",
        "version": {
          "withMetadata": "5af21db85ada1671d9c6eb4b2b52e78c25ee897c1c74078db349dc7ca3148ab0",
          "withoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34",
          "linkedWithoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)",
          "withdrawWithGas(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Escrow",
              "label": "_deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:918"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:796",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "finalized()",
          "finalize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:803"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FinalizableCrowdsale",
              "label": "_finalized",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:799"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDO2": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1273",
        "version": {
          "withMetadata": "bec6c7a17c1d3c0ba4c6c8e0ee26c8165b2e2f3804ae08e5182480754c8e8c12",
          "withoutMetadata": "bec6c7a17c1d3c0ba4c6c8e0ee26c8165b2e2f3804ae08e5182480754c8e8c12",
          "linkedWithoutMetadata": "bec6c7a17c1d3c0ba4c6c8e0ee26c8165b2e2f3804ae08e5182480754c8e8c12"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256,uint256,uint256)",
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO2",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1275"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1191",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "withdrawTokens(address)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1197"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1194"
            },
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_vault",
              "type": "t_contract$___unstable__TokenVault)1709",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1195"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract$___unstable__TokenVault)1709": {
              "label": "contract __unstable__TokenVault"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:448",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:451"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_notEntered",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:449"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundEscrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1016",
        "version": {
          "withMetadata": "3b84973678c748d58f3f98de2d274b92f226f65ffc954a2d944aa962163fd0fb",
          "withoutMetadata": "3b84973678c748d58f3f98de2d274b92f226f65ffc954a2d944aa962163fd0fb",
          "linkedWithoutMetadata": "3b84973678c748d58f3f98de2d274b92f226f65ffc954a2d944aa962163fd0fb"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1029"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundEscrow",
              "label": "_state",
              "type": "t_enum(State)1312",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1022"
            },
            {
              "contract": "RefundEscrow",
              "label": "_beneficiary",
              "type": "t_address_payable",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1023"
            }
          ],
          "types": {
            "t_enum(State)1312": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1112",
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "goal()",
          "claimRefund(address payable)",
          "goalReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1125"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundableCrowdsale",
              "label": "_goal",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1116"
            },
            {
              "contract": "RefundableCrowdsale",
              "label": "_escrow",
              "type": "t_contract(RefundEscrow)1459",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1119"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(RefundEscrow)1459": {
              "label": "contract RefundEscrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1258",
        "inherit": [
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:363",
        "version": {
          "withMetadata": "31f61aaf9daf69a6f8b06c1c961daa92f6a8d0ac6bdb2d7e5f4cf3b90b67710d",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:131",
        "version": {
          "withMetadata": "a4e0fa81c46852fbb32c1e1c1b368bfdd0feac8bc8df222735ea78c570754dd3",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Secondary": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:846",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "primary()",
          "transferPrimary(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Secondary",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:859"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Secondary",
              "label": "_primary",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:847"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:695",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "openingTime()",
          "closingTime()",
          "isOpen()",
          "hasClosed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:721"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TimedCrowdsale",
              "label": "_openingTime",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:698"
            },
            {
              "contract": "TimedCrowdsale",
              "label": "_closingTime",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:699"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__TokenVault": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2_FLattened.sol:1240",
        "version": {
          "withMetadata": "15d1d06262fa3878d13a40e7f78499beaa337de6e3a256db650b0d6d8fd2f37e",
          "withoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980",
          "linkedWithoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Strings": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\Strings.sol:7",
        "version": {
          "withMetadata": "538de202ec288596ea45efc1b0a7ebc4338dc9c57fd839ab5333fdda7a533bf2",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StringsMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\StringsMock.sol:5",
        "version": {
          "withMetadata": "6acfe639dc5c55560e9d5b0f15fc3de1ce153a9f0c0365b5b2aace168bdddbcf",
          "withoutMetadata": "a2687d9521a843b17ba223c1b9cc61adc5a73862877f939043a6f7945f077e4a",
          "linkedWithoutMetadata": "a2687d9521a843b17ba223c1b9cc61adc5a73862877f939043a6f7945f077e4a"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "fromUint256(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SignedSafeMath": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\SignedSafeMath.sol:7",
        "version": {
          "withMetadata": "a4e7cf0a4fc6ce29a5d0176a3797eb0a6c978504f84ed9e3381ee2bc009f4b18",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignedSafeMathMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SignedSafeMathMock.sol:5",
        "version": {
          "withMetadata": "e21c105e6e131061960d5acb7185ef1f397c7671a06897fc67949b38e588b3a7",
          "withoutMetadata": "694993bc6b2365cf48e5cfc3814d43b5226bf66a374eaf5a6e9bbc4164d193c8",
          "linkedWithoutMetadata": "694993bc6b2365cf48e5cfc3814d43b5226bf66a374eaf5a6e9bbc4164d193c8"
        },
        "inherit": [],
        "libraries": [
          "SignedSafeMath"
        ],
        "methods": [
          "mul(int256,int256)",
          "div(int256,int256)",
          "sub(int256,int256)",
          "add(int256,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MerkleProof": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\cryptography\\MerkleProof.sol:6",
        "version": {
          "withMetadata": "4fd9f4f0ec834788a691db06cbc16d0689dd279b04e3c553755669beffbfd60c",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MerkleProofWrapper": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\MerkleProofWrapper.sol:5",
        "version": {
          "withMetadata": "38634b36d4b30aab1118c2083e8d78b70791b4147598a164e43e2e5f9f41705f",
          "withoutMetadata": "a070180de3b6e696a20f9519035cd2c55c353160557fd903755b1866c8e24bd7",
          "linkedWithoutMetadata": "a070180de3b6e696a20f9519035cd2c55c353160557fd903755b1866c8e24bd7"
        },
        "inherit": [],
        "libraries": [
          "MerkleProof"
        ],
        "methods": [
          "verify(bytes32[],bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\Context.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipient": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipient.sol:18",
        "inherit": [
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "relayHubVersion()",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_relayHub",
            "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipient.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipient",
              "label": "_relayHub",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipient.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientERC20Fee": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientERC20Fee.sol:19",
        "version": {
          "withMetadata": "6ab81bb8ad6d9abb5d61ba0d942efdc0393082293c74c731570fa9067876d933",
          "withoutMetadata": "cf6812cc14931a15017466075e5312a84fa6288a49105e7bc61f78b73544fe47",
          "linkedWithoutMetadata": "cf6812cc14931a15017466075e5312a84fa6288a49105e7bc61f78b73544fe47"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "token()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20Fee",
            "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientERC20Fee.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipientERC20Fee",
              "label": "_token",
              "type": "t_contract$___unstable__ERC20PrimaryAdmin)689",
              "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientERC20Fee.sol:27"
            }
          ],
          "types": {
            "t_contract$___unstable__ERC20PrimaryAdmin)689": {
              "label": "contract __unstable__ERC20PrimaryAdmin"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__ERC20PrimaryAdmin": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientERC20Fee.sol:113",
        "version": {
          "withMetadata": "b8574996baedd565befcc98ea623fde436af4512a7e438f26563ea06cdf4853d",
          "withoutMetadata": "837fef2cee488a755d2e45e42a7a18a0aaf7a4d2a9cb27e703a2f6ed2f02a45b",
          "linkedWithoutMetadata": "837fef2cee488a755d2e45e42a7a18a0aaf7a4d2a9cb27e703a2f6ed2f02a45b"
        },
        "inherit": [
          "Secondary",
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "__unstable__ERC20PrimaryAdmin",
            "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientERC20Fee.sol:116"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientSignature": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientSignature.sol:12",
        "version": {
          "withMetadata": "af67f16ec72ab92f7c28dfe62e4396287051904fcc202740ec6866ebe0baaeb6",
          "withoutMetadata": "af67f16ec72ab92f7c28dfe62e4396287051904fcc202740ec6866ebe0baaeb6",
          "linkedWithoutMetadata": "af67f16ec72ab92f7c28dfe62e4396287051904fcc202740ec6866ebe0baaeb6"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(address)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignature",
            "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientSignature.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GSNRecipientSignature",
              "label": "_trustedSigner",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\GSNRecipientSignature.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRelayHub": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\IRelayHub.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "registerRelay(uint256,string)",
          "removeRelayByOwner(address)",
          "unstake(address)",
          "getRelay(address)",
          "depositFor(address)",
          "balanceOf(address)",
          "withdraw(uint256,address payable)",
          "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "requiredGas(uint256)",
          "maxPossibleCharge(uint256,uint256,uint256)",
          "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)",
          "penalizeIllegalTransaction(bytes,bytes)",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRelayRecipient": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\GSN\\IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDO2": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2.sol:6",
        "version": {
          "withMetadata": "13f0c86963e765e2088ba3cd904c65cedc218b474a75983c0bf333b934b9147d",
          "withoutMetadata": "13f0c86963e765e2088ba3cd904c65cedc218b474a75983c0bf333b934b9147d",
          "linkedWithoutMetadata": "13f0c86963e765e2088ba3cd904c65cedc218b474a75983c0bf333b934b9147d"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256,uint256,uint256)",
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IDO2",
            "src": "contracts\\IDO_basedon_Openzeppelin\\IDO2.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\Roles.sol:7",
        "version": {
          "withMetadata": "71b529a6d8ca6d4e01ab8faf4650a54c3f2a8e9170ef9cf24c8f28f1763d20a3",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CapperRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\CapperRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isCapper(address)",
          "addCapper(address)",
          "renounceCapper()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CapperRole",
            "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\CapperRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CapperRole",
              "label": "_cappers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\CapperRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MinterRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\MinterRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isMinter(address)",
          "addMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\MinterRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\MinterRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PauserRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\PauserRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isPauser(address)",
          "addPauser(address)",
          "renouncePauser()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PauserRole",
            "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\PauserRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PauserRole",
              "label": "_pausers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\PauserRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SignerRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\SignerRole.sol:6",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isSigner(address)",
          "addSigner(address)",
          "renounceSigner()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SignerRole",
            "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\SignerRole.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SignerRole",
              "label": "_signers",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\SignerRole.sol:12"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistAdminRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\WhitelistAdminRole.sol:10",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isWhitelistAdmin(address)",
          "addWhitelistAdmin(address)",
          "renounceWhitelistAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WhitelistAdminRole",
            "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\WhitelistAdminRole.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WhitelistAdminRole",
              "label": "_whitelistAdmins",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\WhitelistAdminRole.sol:16"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistedRole": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\WhitelistedRole.sol:13",
        "version": {
          "withMetadata": "bf2c704793fe2494c30da2d932093eb99c66213cfaf508234ff3a5a3b998d1d8",
          "withoutMetadata": "bf2c704793fe2494c30da2d932093eb99c66213cfaf508234ff3a5a3b998d1d8",
          "linkedWithoutMetadata": "bf2c704793fe2494c30da2d932093eb99c66213cfaf508234ff3a5a3b998d1d8"
        },
        "inherit": [
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "isWhitelisted(address)",
          "addWhitelisted(address)",
          "removeWhitelisted(address)",
          "renounceWhitelisted()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "WhitelistedRole",
              "label": "_whitelisteds",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\access\\roles\\WhitelistedRole.sol:19"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Crowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:21",
        "version": {
          "withMetadata": "464b2c3b27ede3bc6603f40f708b538105ff438739a2548b35d30d10627fed72",
          "withoutMetadata": "464b2c3b27ede3bc6603f40f708b538105ff438739a2548b35d30d10627fed72",
          "linkedWithoutMetadata": "464b2c3b27ede3bc6603f40f708b538105ff438739a2548b35d30d10627fed72"
        },
        "inherit": [
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(uint256,address payable,address)",
          "()",
          "token()",
          "wallet()",
          "rate()",
          "weiRaised()",
          "buyTokens(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Crowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Crowdsale",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:26"
            },
            {
              "contract": "Crowdsale",
              "label": "_wallet",
              "type": "t_address_payable",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:29"
            },
            {
              "contract": "Crowdsale",
              "label": "_rate",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:35"
            },
            {
              "contract": "Crowdsale",
              "label": "_weiRaised",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\Crowdsale.sol:38"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\FinalizableCrowdsale.sol:11",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "finalized()",
          "finalize()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\FinalizableCrowdsale.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FinalizableCrowdsale",
              "label": "_finalized",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\FinalizableCrowdsale.sol:14"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol:12",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "withdrawTokens(address)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol:15"
            },
            {
              "contract": "PostDeliveryCrowdsale",
              "label": "_vault",
              "type": "t_contract$___unstable__TokenVault)2374",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract$___unstable__TokenVault)2374": {
              "label": "contract __unstable__TokenVault"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "__unstable__TokenVault": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol:61",
        "version": {
          "withMetadata": "ed047fe658f4936fd2233d354cf00dbb2fd49fecb89dc2278d00c14ffae06dd6",
          "withoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980",
          "linkedWithoutMetadata": "c87bd47bc94fa5846724bc46bace115ac57f3922a8f4904c39968957ded8d980"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\RefundableCrowdsale.sol:18",
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "goal()",
          "claimRefund(address payable)",
          "goalReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\RefundableCrowdsale.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundableCrowdsale",
              "label": "_goal",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\RefundableCrowdsale.sol:22"
            },
            {
              "contract": "RefundableCrowdsale",
              "label": "_escrow",
              "type": "t_contract(RefundEscrow)8687",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\RefundableCrowdsale.sol:25"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(RefundEscrow)8687": {
              "label": "contract RefundEscrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\distribution\\RefundablePostDeliveryCrowdsale.sol:13",
        "inherit": [
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawTokens(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AllowanceCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\emission\\AllowanceCrowdsale.sol:13",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address)",
          "tokenWallet()",
          "remainingTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AllowanceCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\emission\\AllowanceCrowdsale.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AllowanceCrowdsale",
              "label": "_tokenWallet",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\emission\\AllowanceCrowdsale.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MintedCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\emission\\MintedCrowdsale.sol:11",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IncreasingPriceCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\price\\IncreasingPriceCrowdsale.sol:12",
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "rate()",
          "initialRate()",
          "finalRate()",
          "getCurrentRate()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IncreasingPriceCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\price\\IncreasingPriceCrowdsale.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "IncreasingPriceCrowdsale",
              "label": "_initialRate",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\price\\IncreasingPriceCrowdsale.sol:15"
            },
            {
              "contract": "IncreasingPriceCrowdsale",
              "label": "_finalRate",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\price\\IncreasingPriceCrowdsale.sol:16"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CappedCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\CappedCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256)",
          "cap()",
          "capReached()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CappedCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\CappedCrowdsale.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CappedCrowdsale",
              "label": "_cap",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\CappedCrowdsale.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IndividuallyCappedCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\IndividuallyCappedCrowdsale.sol:11",
        "inherit": [
          "CapperRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "setCap(address,uint256)",
          "getCap(address)",
          "getContribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IndividuallyCappedCrowdsale",
              "label": "_contributions",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\IndividuallyCappedCrowdsale.sol:14"
            },
            {
              "contract": "IndividuallyCappedCrowdsale",
              "label": "_caps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\IndividuallyCappedCrowdsale.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\PausableCrowdsale.sol:10",
        "inherit": [
          "Pausable",
          "PauserRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\TimedCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,uint256)",
          "openingTime()",
          "closingTime()",
          "isOpen()",
          "hasClosed()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\TimedCrowdsale.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TimedCrowdsale",
              "label": "_openingTime",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\TimedCrowdsale.sol:13"
            },
            {
              "contract": "TimedCrowdsale",
              "label": "_closingTime",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\TimedCrowdsale.sol:14"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WhitelistCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\crowdsale\\validation\\WhitelistCrowdsale.sol:10",
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\cryptography\\ECDSA.sol:9",
        "version": {
          "withMetadata": "762c556bbde0190839196df90179fbaad9fbc59a07a51eaf8e133ecfba062028",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\Counters.sol:16",
        "version": {
          "withMetadata": "46e5689fdde09d8581863dbb8efa34549f8dbff04d97ce81c02d8b4bd193f703",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Metadata": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC1046\\ERC20Metadata.sol:10",
        "version": {
          "withMetadata": "268e5695169148ee55d6b9ea7240b3cae30acac01bc52362f9effb1df56a7cca",
          "withoutMetadata": "72e0deb7af4f167c33e943e79f5ff9675bc455b36a643c1b2acf784fdeaa1e71",
          "linkedWithoutMetadata": "72e0deb7af4f167c33e943e79f5ff9675bc455b36a643c1b2acf784fdeaa1e71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string)",
          "tokenURI()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Metadata",
            "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC1046\\ERC20Metadata.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Metadata",
              "label": "_tokenURI",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC1046\\ERC20Metadata.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Migrator": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Migrator.sol:35",
        "version": {
          "withMetadata": "81f885d90aa75fb0c4505b0598c387b94b7c5d0848421622e73b4c6c27e0a45f",
          "withoutMetadata": "81f885d90aa75fb0c4505b0598c387b94b7c5d0848421622e73b4c6c27e0a45f",
          "linkedWithoutMetadata": "81f885d90aa75fb0c4505b0598c387b94b7c5d0848421622e73b4c6c27e0a45f"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address)",
          "legacyToken()",
          "newToken()",
          "beginMigration(address)",
          "migrate(address,uint256)",
          "migrateAll(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Migrator",
            "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Migrator.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Migrator",
              "label": "_legacyToken",
              "type": "t_contract(IERC20)9442",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Migrator.sol:39"
            },
            {
              "contract": "ERC20Migrator",
              "label": "_newToken",
              "type": "t_contract(ERC20Mintable)9271",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Migrator.sol:42"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_contract(ERC20Mintable)9271": {
              "label": "contract ERC20Mintable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Snapshot.sol:23",
        "version": {
          "withMetadata": "cfc093e149d931107c75d484b19c680c1e738ffb5bd6ebf422969f5550f82ead",
          "withoutMetadata": "a03c8b3c92945cc74632b67544dfa84521e19efc0a3457d7372d062ce7545a95",
          "linkedWithoutMetadata": "a03c8b3c92945cc74632b67544dfa84521e19efc0a3457d7372d062ce7545a95"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Arrays",
          "Counters"
        ],
        "methods": [
          "snapshot()",
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)3539_storage)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Snapshot.sol:35"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)3539_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Snapshot.sol:36"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)3275_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\ERC20Snapshot.sol:39"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)3539_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)3539_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TokenVesting": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:13",
        "version": {
          "withMetadata": "1c2eed30df59abdf4487abac810c2da589ebe7e0cff67a84ccc96259b536b9da",
          "withoutMetadata": "1c2eed30df59abdf4487abac810c2da589ebe7e0cff67a84ccc96259b536b9da",
          "linkedWithoutMetadata": "1c2eed30df59abdf4487abac810c2da589ebe7e0cff67a84ccc96259b536b9da"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256,bool)",
          "beneficiary()",
          "cliff()",
          "start()",
          "duration()",
          "revocable()",
          "released(address)",
          "revoked(address)",
          "release(address)",
          "revoke(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenVesting",
            "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenVesting",
              "label": "_beneficiary",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:27"
            },
            {
              "contract": "TokenVesting",
              "label": "_cliff",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:30"
            },
            {
              "contract": "TokenVesting",
              "label": "_start",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:31"
            },
            {
              "contract": "TokenVesting",
              "label": "_duration",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:32"
            },
            {
              "contract": "TokenVesting",
              "label": "_revocable",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:34"
            },
            {
              "contract": "TokenVesting",
              "label": "_released",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:36"
            },
            {
              "contract": "TokenVesting",
              "label": "_revoked",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\drafts\\TokenVesting.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SampleCrowdsale": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SampleCrowdsale.sol:33",
        "version": {
          "withMetadata": "6f42d3fb3000f9ade56d8bd34f693eae4d86e92a53b6955babac6c551040f1ab",
          "withoutMetadata": "6f42d3fb3000f9ade56d8bd34f693eae4d86e92a53b6955babac6c551040f1ab",
          "linkedWithoutMetadata": "6f42d3fb3000f9ade56d8bd34f693eae4d86e92a53b6955babac6c551040f1ab"
        },
        "inherit": [
          "MintedCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "CappedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SampleCrowdsale",
            "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SampleCrowdsale.sol:34"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SampleCrowdsaleToken": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SampleCrowdsale.sol:14",
        "version": {
          "withMetadata": "441784009685b1439bf9d5b68d7abf189006645a863dec3b41d4020057898e04",
          "withoutMetadata": "441784009685b1439bf9d5b68d7abf189006645a863dec3b41d4020057898e04",
          "linkedWithoutMetadata": "441784009685b1439bf9d5b68d7abf189006645a863dec3b41d4020057898e04"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SampleCrowdsaleToken",
            "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SampleCrowdsale.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SimpleToken": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SimpleToken.sol:13",
        "version": {
          "withMetadata": "2c1c482e53ff6096a26bd9e5d900fda156d10b182969ad08e95f1c6789f6ce98",
          "withoutMetadata": "fbf926553257b9f6ce0be3190ccb9e7c6a40be5ba10bba36090587c5deb7adf6",
          "linkedWithoutMetadata": "fbf926553257b9f6ce0be3190ccb9e7c6a40be5ba10bba36090587c5deb7adf6"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleToken",
            "src": "contracts\\IDO_basedon_Openzeppelin\\examples\\SimpleToken.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC165.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC165.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC165",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC165.sol:20"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1820Implementer": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC1820Implementer.sol:13",
        "version": {
          "withMetadata": "ad1a7f50a739b4771a49b9d0d6f11b58f72bf0e5b8a7cbbda88439a733d4c5fc",
          "withoutMetadata": "580848b08fd23a714e5566f1cc15a821c322c4c442551dbfb15910aa75240f4b",
          "linkedWithoutMetadata": "580848b08fd23a714e5566f1cc15a821c322c4c442551dbfb15910aa75240f4b"
        },
        "inherit": [
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1820Implementer",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\ERC1820Implementer.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\IERC165.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1820Implementer": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\IERC1820Implementer.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1820Registry": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\introspection\\IERC1820Registry.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setManager(address,address)",
          "getManager(address)",
          "setInterfaceImplementer(address,bytes32,address)",
          "getInterfaceImplementer(address,bytes32)",
          "interfaceHash(string)",
          "updateERC165Cache(address,bytes4)",
          "implementsERC165Interface(address,bytes4)",
          "implementsERC165InterfaceNoCache(address,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\lifecycle\\Pausable.sol:15",
        "inherit": [
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts\\IDO_basedon_Openzeppelin\\lifecycle\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\lifecycle\\Pausable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\math\\Math.sol:6",
        "version": {
          "withMetadata": "992bc8e5116a9fbd1ead2db42979ea45206f74ca535380bed4b8b8a28e24e8a1",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "712718d777192d1708ab94bb1327d03201b3cb5c93374abc4a248ab0dea7dabf",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\AddressImpl.sol:5",
        "version": {
          "withMetadata": "fa5989b96d240fcd5d92a0437dc6a5c14d70fa67c1e2e8b68d2ee9f50117a2ef",
          "withoutMetadata": "46fa98da52e3daac12c6b93a15b2c0c8b6e16d6b8721f4a556d94ccccd269fe6",
          "linkedWithoutMetadata": "46fa98da52e3daac12c6b93a15b2c0c8b6e16d6b8721f4a556d94ccccd269fe6"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "isContract(address)",
          "toPayable(address)",
          "sendValue(address payable,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AllowanceCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\AllowanceCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "a7bbf368579414c06b9f6f51d490f51edefb1046c3d0ac73ad1285364b2e2a86",
          "withoutMetadata": "a7bbf368579414c06b9f6f51d490f51edefb1046c3d0ac73ad1285364b2e2a86",
          "linkedWithoutMetadata": "a7bbf368579414c06b9f6f51d490f51edefb1046c3d0ac73ad1285364b2e2a86"
        },
        "inherit": [
          "AllowanceCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AllowanceCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\AllowanceCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ArraysImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ArraysImpl.sol:5",
        "version": {
          "withMetadata": "3e2e082423adc7493ca4fd70039de41240ad4ed5b182a8d94457583ab5bf65a1",
          "withoutMetadata": "84847901beb3a32625adacf9e44f5c94981d8386190cee4f0cfe7218afa78f24",
          "linkedWithoutMetadata": "84847901beb3a32625adacf9e44f5c94981d8386190cee4f0cfe7218afa78f24"
        },
        "inherit": [],
        "libraries": [
          "Arrays"
        ],
        "methods": [
          "(uint256[])",
          "findUpperBound(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArraysImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ArraysImpl.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ArraysImpl",
              "label": "array",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ArraysImpl.sol:8"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CappedCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CappedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "7a772d2e40a1617b11b3876602d85f4dd02e13d5aee9989fa7c052c04611a46c",
          "withoutMetadata": "7a772d2e40a1617b11b3876602d85f4dd02e13d5aee9989fa7c052c04611a46c",
          "linkedWithoutMetadata": "7a772d2e40a1617b11b3876602d85f4dd02e13d5aee9989fa7c052c04611a46c"
        },
        "inherit": [
          "CappedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CappedCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CappedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CapperRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CapperRoleMock.sol:5",
        "version": {
          "withMetadata": "fcd59cd5d87647cdcd95cf42be094bdd3d8f34fdacbc5dfb76e6a36eefe7f996",
          "withoutMetadata": "fcd59cd5d87647cdcd95cf42be094bdd3d8f34fdacbc5dfb76e6a36eefe7f996",
          "linkedWithoutMetadata": "fcd59cd5d87647cdcd95cf42be094bdd3d8f34fdacbc5dfb76e6a36eefe7f996"
        },
        "inherit": [
          "CapperRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeCapper(address)",
          "onlyCapperMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrowMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ConditionalEscrowMock.sol:6",
        "version": {
          "withMetadata": "2b5b4ffa04416fe590729ad3620dc6d9afe3d3094473191ad41492e71fa6e8f7",
          "withoutMetadata": "6ac26eb830824af6bc3792bbbc80e8195f71bbca59fe32cd5ad875c402f799cd",
          "linkedWithoutMetadata": "6ac26eb830824af6bc3792bbbc80e8195f71bbca59fe32cd5ad875c402f799cd"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setAllowed(address,bool)",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConditionalEscrowMock",
              "label": "_allowed",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ConditionalEscrowMock.sol:7"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ContextMock.sol:5",
        "version": {
          "withMetadata": "ed72f709d4715baf77f709c9da423f1e23bbc4b17a6a90e200f7d880ccfbc5ec",
          "withoutMetadata": "06c45a36b30bef6a668e114bcab0168e09684a994baa40449966b018be8d3f94",
          "linkedWithoutMetadata": "06c45a36b30bef6a668e114bcab0168e09684a994baa40449966b018be8d3f94"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "msgSender()",
          "msgData(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextMockCaller": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ContextMock.sol:19",
        "version": {
          "withMetadata": "249c5a11d134dca0d161f2937363285358dc08082ac55c0ed29107c6a1006b1c",
          "withoutMetadata": "b3740bc91030885c41c4274725a5b39e3d8d51c4e24802b9b3f9ca1c14c6a18d",
          "linkedWithoutMetadata": "b3740bc91030885c41c4274725a5b39e3d8d51c4e24802b9b3f9ca1c14c6a18d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callSender(address)",
          "callData(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CountersImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CountersImpl.sol:5",
        "version": {
          "withMetadata": "a448aa9d7305e63a9bf72b45a54c641565ccbc0751d9279c720cf75c1d065e2e",
          "withoutMetadata": "9cbfeb6f2d6f43324eaeaceb6b7988b4bdea155767033602cf554e228310e980",
          "linkedWithoutMetadata": "9cbfeb6f2d6f43324eaeaceb6b7988b4bdea155767033602cf554e228310e980"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "current()",
          "increment()",
          "decrement()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CountersImpl",
              "label": "_counter",
              "type": "t_struct(Counter)3275_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CountersImpl.sol:8"
            }
          ],
          "types": {
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Create2Impl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\Create2Impl.sol:6",
        "version": {
          "withMetadata": "0f0ade5fb4d015080fac3e31b71a5a5743c5cc5ee7d39032a1889bb4a8dbd464",
          "withoutMetadata": "a171ec0d4f37731f5d9be8ff1f1f7cd2ec28b90c64bd3c81894593c2e8babcf8",
          "linkedWithoutMetadata": "a171ec0d4f37731f5d9be8ff1f1f7cd2ec28b90c64bd3c81894593c2e8babcf8"
        },
        "inherit": [],
        "libraries": [
          "Create2"
        ],
        "methods": [
          "deploy(bytes32,bytes)",
          "deployERC20(bytes32)",
          "computeAddress(bytes32,bytes)",
          "computeAddress(bytes32,bytes,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CrowdsaleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CrowdsaleMock.sol:5",
        "version": {
          "withMetadata": "2f5b72b43ea583390d5153c7d0d24e2b9d94bb0452fe2f6a0203f2c479c96636",
          "withoutMetadata": "2f5b72b43ea583390d5153c7d0d24e2b9d94bb0452fe2f6a0203f2c479c96636",
          "linkedWithoutMetadata": "2f5b72b43ea583390d5153c7d0d24e2b9d94bb0452fe2f6a0203f2c479c96636"
        },
        "inherit": [
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrowdsaleMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\CrowdsaleMock.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ECDSAMock.sol:5",
        "version": {
          "withMetadata": "22dd93175a3ff84f9399285ab67049588550f87774359221fa55c6da7e0a897e",
          "withoutMetadata": "d795683c538cd0dfa7cecbd60d3a904764addb8dd8a6fffcdad72e3f1ad6343a",
          "linkedWithoutMetadata": "d795683c538cd0dfa7cecbd60d3a904764addb8dd8a6fffcdad72e3f1ad6343a"
        },
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "recover(bytes32,bytes)",
          "toEthSignedMessageHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165InterfacesSupported": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165InterfacesSupported.sol:50",
        "version": {
          "withMetadata": "943098bbc4aa3dcb3a3d061a49c0dbbd09d9cae062212c5e35d3343b95c34a8b",
          "withoutMetadata": "943098bbc4aa3dcb3a3d061a49c0dbbd09d9cae062212c5e35d3343b95c34a8b",
          "linkedWithoutMetadata": "943098bbc4aa3dcb3a3d061a49c0dbbd09d9cae062212c5e35d3343b95c34a8b"
        },
        "inherit": [
          "SupportsInterfaceWithLookupMock",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165InterfacesSupported",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165InterfacesSupported.sol:51"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SupportsInterfaceWithLookupMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165InterfacesSupported.sol:15",
        "version": {
          "withMetadata": "44ec4613cd92d8b9b1302b914b62675a2e63b2f74ebcb34ef11f60dd4fb2e4b2",
          "withoutMetadata": "44ec4613cd92d8b9b1302b914b62675a2e63b2f74ebcb34ef11f60dd4fb2e4b2",
          "linkedWithoutMetadata": "44ec4613cd92d8b9b1302b914b62675a2e63b2f74ebcb34ef11f60dd4fb2e4b2"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SupportsInterfaceWithLookupMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165InterfacesSupported.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SupportsInterfaceWithLookupMock",
              "label": "_supportedInterfaces",
              "type": "t_mapping(t_bytes4,t_bool)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165\\ERC165InterfacesSupported.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)"
            },
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC165Mock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC165Mock.sol:5",
        "version": {
          "withMetadata": "073a948ddcca404b2b8fb3f134c4b725f1d6ffba656e343d93a46c37fa71c853",
          "withoutMetadata": "69fb309f33bb15233adc4ae8571e3bab5d086b3c62b2444e36e61860385fafe7",
          "linkedWithoutMetadata": "69fb309f33bb15233adc4ae8571e3bab5d086b3c62b2444e36e61860385fafe7"
        },
        "inherit": [
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "registerInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1820ImplementerMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC1820ImplementerMock.sol:5",
        "version": {
          "withMetadata": "0e81719bc91f99649ed38ff1597e9a1160bf8fa88c4c4b256d2c3532d7abd79b",
          "withoutMetadata": "9e79ccc2386663ae297fc48d85316207d58f85427f6aa75eaf30bd74dad6d43f",
          "linkedWithoutMetadata": "9e79ccc2386663ae297fc48d85316207d58f85427f6aa75eaf30bd74dad6d43f"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "registerInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20BurnableMock.sol:5",
        "version": {
          "withMetadata": "279ea168419a38d63e3153d610c18bdc88d17e6e6b51a78e288b2b1c47157f32",
          "withoutMetadata": "6f72c98e62597d6c85c5119efafe351a0d820d8293ab0dc629f6a7f8add26f19",
          "linkedWithoutMetadata": "6f72c98e62597d6c85c5119efafe351a0d820d8293ab0dc629f6a7f8add26f19"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20BurnableMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20BurnableMock.sol:6"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20DetailedMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20DetailedMock.sol:6",
        "version": {
          "withMetadata": "12bd7277e218ddb83a7d00b6ba59032c38cbe276f838158ca3991448bf9e280d",
          "withoutMetadata": "d978ed39e981804cdaa2f4be9bd5a22a244ace1f46b65060b4a20a901ea9b251",
          "linkedWithoutMetadata": "d978ed39e981804cdaa2f4be9bd5a22a244ace1f46b65060b4a20a901ea9b251"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20DetailedMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20DetailedMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20MetadataMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20MetadataMock.sol:6",
        "version": {
          "withMetadata": "c9360ca015e8f578d6cd3a85f23d911bc2d51a198e8fba028894dff55230abf2",
          "withoutMetadata": "ccc00d5ff55304dc2bc18440c20da7d6da615553c79cd53ee27cfdb04f27ea85",
          "linkedWithoutMetadata": "ccc00d5ff55304dc2bc18440c20da7d6da615553c79cd53ee27cfdb04f27ea85"
        },
        "inherit": [
          "ERC20Metadata",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20MetadataMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20MetadataMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20MintableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20MintableMock.sol:6",
        "version": {
          "withMetadata": "514fbf669a913ff7a5337fc02ff9aa5fe56cf53f862ce69932dc6fabfd6a62c0",
          "withoutMetadata": "514fbf669a913ff7a5337fc02ff9aa5fe56cf53f862ce69932dc6fabfd6a62c0",
          "linkedWithoutMetadata": "514fbf669a913ff7a5337fc02ff9aa5fe56cf53f862ce69932dc6fabfd6a62c0"
        },
        "inherit": [
          "MinterRoleMock",
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20Mock.sol:6",
        "version": {
          "withMetadata": "fd604f7f68c23bc22fd6f72bfef985f81180839d55c62257e75a4a35996f1a3b",
          "withoutMetadata": "27f6797e07f284d528f2ac97e1517280f83086732ca628b463017e0fc7abda30",
          "linkedWithoutMetadata": "27f6797e07f284d528f2ac97e1517280f83086732ca628b463017e0fc7abda30"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "burnFrom(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PausableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20PausableMock.sol:7",
        "version": {
          "withMetadata": "9dc379704d7f286be02c7bf11ac1413f5f71b00b51cd23ce8a856e11907b4f2e",
          "withoutMetadata": "9dc379704d7f286be02c7bf11ac1413f5f71b00b51cd23ce8a856e11907b4f2e",
          "linkedWithoutMetadata": "9dc379704d7f286be02c7bf11ac1413f5f71b00b51cd23ce8a856e11907b4f2e"
        },
        "inherit": [
          "PauserRoleMock",
          "ERC20Pausable",
          "Pausable",
          "PauserRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PausableMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20PausableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20SnapshotMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20SnapshotMock.sol:6",
        "version": {
          "withMetadata": "d539f328c54affaf9c9166de34a40799d593515d16f6cb79d01b95a898eecbaa",
          "withoutMetadata": "9ee5f3dde357c1ddc9a5a59dc251171f5a7ffb47f5c379b21755b843181d4f25",
          "linkedWithoutMetadata": "9ee5f3dde357c1ddc9a5a59dc251171f5a7ffb47f5c379b21755b843181d4f25"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20SnapshotMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC20SnapshotMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721FullMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721FullMock.sol:13",
        "version": {
          "withMetadata": "c0b043be95e8cf2184fa6dfcdda36e1144990f5710a94d2ff2ddf9b088d38b59",
          "withoutMetadata": "c0b043be95e8cf2184fa6dfcdda36e1144990f5710a94d2ff2ddf9b088d38b59",
          "linkedWithoutMetadata": "c0b043be95e8cf2184fa6dfcdda36e1144990f5710a94d2ff2ddf9b088d38b59"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721MetadataMintable",
          "ERC721Mintable",
          "MinterRole",
          "ERC721Full",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "exists(uint256)",
          "tokensOfOwner(address)",
          "setTokenURI(uint256,string)",
          "setBaseURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721FullMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721FullMock.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721GSNRecipientMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721GSNRecipientMock.sol:11",
        "version": {
          "withMetadata": "20dade568c5de651b928c4289e576c1b5565a7d250aba79a8fc1d808a59117e6",
          "withoutMetadata": "20dade568c5de651b928c4289e576c1b5565a7d250aba79a8fc1d808a59117e6",
          "linkedWithoutMetadata": "20dade568c5de651b928c4289e576c1b5565a7d250aba79a8fc1d808a59117e6"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721GSNRecipientMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721GSNRecipientMock.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721MintableBurnableImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721MintableBurnableImpl.sol:11",
        "version": {
          "withMetadata": "013a59741f17cf3ad5a75430ea9698e1e915b5229c8448e109b13f0f588fb528",
          "withoutMetadata": "013a59741f17cf3ad5a75430ea9698e1e915b5229c8448e109b13f0f588fb528",
          "linkedWithoutMetadata": "013a59741f17cf3ad5a75430ea9698e1e915b5229c8448e109b13f0f588fb528"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721MetadataMintable",
          "ERC721Mintable",
          "MinterRole",
          "ERC721Full",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721MintableBurnableImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721MintableBurnableImpl.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Mock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721Mock.sol:9",
        "version": {
          "withMetadata": "6a276f57cf8c058b857636f1707c742397a97e307ba190ece1bb2e34aae0cb30",
          "withoutMetadata": "853f46d4863047646276cda1c89f8b0bfd8f3fd18311fa72f4e68321c57f7f83",
          "linkedWithoutMetadata": "853f46d4863047646276cda1c89f8b0bfd8f3fd18311fa72f4e68321c57f7f83"
        },
        "inherit": [
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721PausableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721PausableMock.sol:10",
        "version": {
          "withMetadata": "7c7c656ae2c23fdaacea4851a282c46ca8f66c650829b114d1280acc408487e3",
          "withoutMetadata": "7c7c656ae2c23fdaacea4851a282c46ca8f66c650829b114d1280acc408487e3",
          "linkedWithoutMetadata": "7c7c656ae2c23fdaacea4851a282c46ca8f66c650829b114d1280acc408487e3"
        },
        "inherit": [
          "PauserRoleMock",
          "ERC721Pausable",
          "Pausable",
          "PauserRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721ReceiverMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721ReceiverMock.sol:5",
        "version": {
          "withMetadata": "1da0ff53eab2e4be64f49506b322df628a37ef373386d364f73b3bb053de6ece",
          "withoutMetadata": "2ae893d375d0acdb784cbffaab000f61f5fc8c9b4c239de3050d8068585e4be0",
          "linkedWithoutMetadata": "2ae893d375d0acdb784cbffaab000f61f5fc8c9b4c239de3050d8068585e4be0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721ReceiverMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721ReceiverMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721ReceiverMock",
              "label": "_retval",
              "type": "t_bytes4",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721ReceiverMock.sol:6"
            },
            {
              "contract": "ERC721ReceiverMock",
              "label": "_reverts",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC721ReceiverMock.sol:7"
            }
          ],
          "types": {
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC777Mock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777Mock.sol:6",
        "version": {
          "withMetadata": "64022383733a0d4ca8a19a8bc67fb3584255795327b5e492749ae71ffdbb4cd9",
          "withoutMetadata": "64022383733a0d4ca8a19a8bc67fb3584255795327b5e492749ae71ffdbb4cd9",
          "linkedWithoutMetadata": "64022383733a0d4ca8a19a8bc67fb3584255795327b5e492749ae71ffdbb4cd9"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string,address[])",
          "mintInternal(address,address,uint256,bytes,bytes)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777Mock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC777SenderRecipientMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777SenderRecipientMock.sol:10",
        "version": {
          "withMetadata": "c14cc34c3385de23687a1d383d737e44e0d75ef27d18123d04ba5779440d66f5",
          "withoutMetadata": "d5806206a87372e01be84db6ad948dda0c079c793a7c22410bc91bd177f0a4e6",
          "linkedWithoutMetadata": "d5806206a87372e01be84db6ad948dda0c079c793a7c22410bc91bd177f0a4e6"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer",
          "IERC777Recipient",
          "IERC777Sender",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "senderFor(address)",
          "registerSender(address)",
          "recipientFor(address)",
          "registerRecipient(address)",
          "setShouldRevertSend(bool)",
          "setShouldRevertReceive(bool)",
          "send(address,address,uint256,bytes)",
          "burn(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_erc1820",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777SenderRecipientMock.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_shouldRevertSend",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777SenderRecipientMock.sol:35"
            },
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_shouldRevertReceive",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777SenderRecipientMock.sol:36"
            },
            {
              "contract": "ERC777SenderRecipientMock",
              "label": "_erc1820",
              "type": "t_contract(IERC1820Registry)4531",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ERC777SenderRecipientMock.sol:38"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC1820Registry)4531": {
              "label": "contract IERC1820Registry"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FinalizableCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\FinalizableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "b18869f0ef83c6cd6413306ca3db0bc06116761b9b21c0fce81e7a17ce7e2ea9",
          "withoutMetadata": "b18869f0ef83c6cd6413306ca3db0bc06116761b9b21c0fce81e7a17ce7e2ea9",
          "linkedWithoutMetadata": "b18869f0ef83c6cd6413306ca3db0bc06116761b9b21c0fce81e7a17ce7e2ea9"
        },
        "inherit": [
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FinalizableCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\FinalizableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientERC20FeeMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\GSNRecipientERC20FeeMock.sol:6",
        "version": {
          "withMetadata": "15b63a9108126719f40707327ebf0082d6a317eb6c59698ad34f8b4a6c1b16ae",
          "withoutMetadata": "921907d5e9effa900b3fecb4a188ce887e153feb55aa2acd81cca7d2194b6cb1",
          "linkedWithoutMetadata": "921907d5e9effa900b3fecb4a188ce887e153feb55aa2acd81cca7d2194b6cb1"
        },
        "inherit": [
          "GSNRecipientERC20Fee",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20FeeMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\GSNRecipientERC20FeeMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\GSNRecipientMock.sol:7",
        "version": {
          "withMetadata": "c5c9c4848a6ec86b38d7f22a3f55f5ff3f8a47738f2cd2ac96cc5142ee5fefa6",
          "withoutMetadata": "d3addbe58ed0ef20a428c4ef2e9874f2d4542e1f60e66d9187bce6fac9555543",
          "linkedWithoutMetadata": "d3addbe58ed0ef20a428c4ef2e9874f2d4542e1f60e66d9187bce6fac9555543"
        },
        "inherit": [
          "GSNRecipient",
          "ContextMock",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "withdrawDeposits(uint256,address payable)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "upgradeRelayHub(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GSNRecipientSignatureMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\GSNRecipientSignatureMock.sol:6",
        "version": {
          "withMetadata": "bfc87e249b282c38f4485ee016421ea5cb6f95716e00381cccc4724debb66b37",
          "withoutMetadata": "bfc87e249b282c38f4485ee016421ea5cb6f95716e00381cccc4724debb66b37",
          "linkedWithoutMetadata": "bfc87e249b282c38f4485ee016421ea5cb6f95716e00381cccc4724debb66b37"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignatureMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\GSNRecipientSignatureMock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IncreasingPriceCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\IncreasingPriceCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "80edcd9e5d171040b979251e0868228e6476a756ea6b1fe0e644fb5c44a3b8e8",
          "withoutMetadata": "80edcd9e5d171040b979251e0868228e6476a756ea6b1fe0e644fb5c44a3b8e8",
          "linkedWithoutMetadata": "80edcd9e5d171040b979251e0868228e6476a756ea6b1fe0e644fb5c44a3b8e8"
        },
        "inherit": [
          "IncreasingPriceCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,address payable,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IncreasingPriceCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\IncreasingPriceCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IndividuallyCappedCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\IndividuallyCappedCrowdsaleImpl.sol:7",
        "version": {
          "withMetadata": "e03a0b0c62fa968e80a92f3277b078471deb645e7c2b445187d36ba9cb355ad8",
          "withoutMetadata": "e03a0b0c62fa968e80a92f3277b078471deb645e7c2b445187d36ba9cb355ad8",
          "linkedWithoutMetadata": "e03a0b0c62fa968e80a92f3277b078471deb645e7c2b445187d36ba9cb355ad8"
        },
        "inherit": [
          "CapperRoleMock",
          "IndividuallyCappedCrowdsale",
          "CapperRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IndividuallyCappedCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\IndividuallyCappedCrowdsaleImpl.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MathMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\MathMock.sol:5",
        "version": {
          "withMetadata": "ad98c62aeefc26b83ccdb3f9be46e500ea79a6521ec2b16641f48bc1048421db",
          "withoutMetadata": "aa56c1a34fa0eaa2e0d4355e1bd81e3b6dbeb9bb74953b347ea38fd09f1a861b",
          "linkedWithoutMetadata": "aa56c1a34fa0eaa2e0d4355e1bd81e3b6dbeb9bb74953b347ea38fd09f1a861b"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [
          "max(uint256,uint256)",
          "min(uint256,uint256)",
          "average(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MintedCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\MintedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "241992a955eef40977d738b5db90b8b85eff3f1c49bb3fa59d68198aff6f476d",
          "withoutMetadata": "241992a955eef40977d738b5db90b8b85eff3f1c49bb3fa59d68198aff6f476d",
          "linkedWithoutMetadata": "241992a955eef40977d738b5db90b8b85eff3f1c49bb3fa59d68198aff6f476d"
        },
        "inherit": [
          "MintedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MintedCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\MintedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MinterRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\MinterRoleMock.sol:5",
        "version": {
          "withMetadata": "d558106a42e99cb97efdb7b329538e63f641e697ee1ba5649f8a2e44356e64ac",
          "withoutMetadata": "d558106a42e99cb97efdb7b329538e63f641e697ee1ba5649f8a2e44356e64ac",
          "linkedWithoutMetadata": "d558106a42e99cb97efdb7b329538e63f641e697ee1ba5649f8a2e44356e64ac"
        },
        "inherit": [
          "MinterRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeMinter(address)",
          "onlyMinterMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableInterfaceId": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\OwnableInterfaceId.sol:10",
        "version": {
          "withMetadata": "bdf5cca96bef94774977ac73a6fa5e1c607e90acd71e11c871c4fe3503ce3328",
          "withoutMetadata": "a3f3c5ef8df2ae523f4fc80d4a76c7aa803fee6a3105e7d4fe2cf589e2fa471f",
          "linkedWithoutMetadata": "a3f3c5ef8df2ae523f4fc80d4a76c7aa803fee6a3105e7d4fe2cf589e2fa471f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInterfaceId()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\OwnableMock.sol:5",
        "version": {
          "withMetadata": "056b14134bffc5f13b383b1fadea89d42f1cc8dc4d056e0f31a489baf46fd865",
          "withoutMetadata": "63c7bda1e660fe493bd4ee87a619683dd215a1f2d116736976ee6724abda6409",
          "linkedWithoutMetadata": "63c7bda1e660fe493bd4ee87a619683dd215a1f2d116736976ee6724abda6409"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PausableCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "9211481d996740281e0b170d0fd8c99f169553788c116689c9d3216efa2a4e41",
          "withoutMetadata": "9211481d996740281e0b170d0fd8c99f169553788c116689c9d3216efa2a4e41",
          "linkedWithoutMetadata": "9211481d996740281e0b170d0fd8c99f169553788c116689c9d3216efa2a4e41"
        },
        "inherit": [
          "PausableCrowdsale",
          "Pausable",
          "PauserRole",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PausableMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableMock.sol:7",
        "version": {
          "withMetadata": "6a9ed15e46b9b281986c4f5fdec99481fab5e599ebf590a035fc1d7c41ebf2fb",
          "withoutMetadata": "6a9ed15e46b9b281986c4f5fdec99481fab5e599ebf590a035fc1d7c41ebf2fb",
          "linkedWithoutMetadata": "6a9ed15e46b9b281986c4f5fdec99481fab5e599ebf590a035fc1d7c41ebf2fb"
        },
        "inherit": [
          "PauserRoleMock",
          "Pausable",
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "normalProcess()",
          "drasticMeasure()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PausableMock",
              "label": "drasticMeasureTaken",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableMock.sol:8"
            },
            {
              "contract": "PausableMock",
              "label": "count",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PausableMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PauserRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PauserRoleMock.sol:5",
        "version": {
          "withMetadata": "5911aa050477f20f95b819dd5ffee0d3a1d6aec2371adb82a214e76b4309917c",
          "withoutMetadata": "5911aa050477f20f95b819dd5ffee0d3a1d6aec2371adb82a214e76b4309917c",
          "linkedWithoutMetadata": "5911aa050477f20f95b819dd5ffee0d3a1d6aec2371adb82a214e76b4309917c"
        },
        "inherit": [
          "PauserRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removePauser(address)",
          "onlyPauserMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PostDeliveryCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PostDeliveryCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "b3a3525071cd4771c6e18f325d27476305dd9b16e87a4bf5e9fd5a28bb2379e2",
          "withoutMetadata": "b3a3525071cd4771c6e18f325d27476305dd9b16e87a4bf5e9fd5a28bb2379e2",
          "linkedWithoutMetadata": "b3a3525071cd4771c6e18f325d27476305dd9b16e87a4bf5e9fd5a28bb2379e2"
        },
        "inherit": [
          "PostDeliveryCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PostDeliveryCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PostDeliveryCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PullPaymentMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\PullPaymentMock.sol:6",
        "version": {
          "withMetadata": "fc72abe2ac51dad8eb6440443b56205de5c71a607a7187f7ada8a7b0911a42e6",
          "withoutMetadata": "bc8ac51ca2e912bc33e3b4d014c07ef2910f82697e58adfba654817450487b76",
          "linkedWithoutMetadata": "bc8ac51ca2e912bc33e3b4d014c07ef2910f82697e58adfba654817450487b76"
        },
        "inherit": [
          "PullPayment"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyAttack": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ReentrancyAttack.sol:4",
        "version": {
          "withMetadata": "10466277346aedea8471bc66a231b110f9e24d8f831cd0128d3c525ab0e5a668",
          "withoutMetadata": "3aaea6aaaab3a05d8a1299bc730bd8e334b42875693a2742af4f03101bdf25f8",
          "linkedWithoutMetadata": "3aaea6aaaab3a05d8a1299bc730bd8e334b42875693a2742af4f03101bdf25f8"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "callSender(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ReentrancyMock.sol:6",
        "version": {
          "withMetadata": "caa950eaebfd90aa0d6b80ac24a9592590ac67ac188e8fa764817583dffba178",
          "withoutMetadata": "fd57db822b70effa709f45ed90e036f1653ee4d2d2e1179dd16053a0fd6d0ab5",
          "linkedWithoutMetadata": "fd57db822b70effa709f45ed90e036f1653ee4d2d2e1179dd16053a0fd6d0ab5"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callback()",
          "countLocalRecursive(uint256)",
          "countThisRecursive(uint256)",
          "countAndCall(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyMock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ReentrancyMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyMock",
              "label": "counter",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\ReentrancyMock.sol:7"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundableCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RefundableCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "a6e9927fb02e5271cbdf87bb162a6b2bfed8c074124fde28116a902b845897c0",
          "withoutMetadata": "a6e9927fb02e5271cbdf87bb162a6b2bfed8c074124fde28116a902b845897c0",
          "linkedWithoutMetadata": "a6e9927fb02e5271cbdf87bb162a6b2bfed8c074124fde28116a902b845897c0"
        },
        "inherit": [
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundableCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RefundableCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RefundablePostDeliveryCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RefundablePostDeliveryCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "914fc08bf4aa5b002f35d71afc0237e8f3701b7fbb7d1e8da7711936ef910cb7",
          "withoutMetadata": "914fc08bf4aa5b002f35d71afc0237e8f3701b7fbb7d1e8da7711936ef910cb7",
          "linkedWithoutMetadata": "914fc08bf4aa5b002f35d71afc0237e8f3701b7fbb7d1e8da7711936ef910cb7"
        },
        "inherit": [
          "RefundablePostDeliveryCrowdsale",
          "PostDeliveryCrowdsale",
          "RefundableCrowdsale",
          "FinalizableCrowdsale",
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundablePostDeliveryCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RefundablePostDeliveryCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RolesMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RolesMock.sol:5",
        "version": {
          "withMetadata": "31cc094b094b67dddde2698b704f66f56000da3a960271c642b13ad524802c8e",
          "withoutMetadata": "2a23a3dfdc2f69d101e8324e14bcd9abaa48a77e5d47b4540ab434bb436a7d12",
          "linkedWithoutMetadata": "2a23a3dfdc2f69d101e8324e14bcd9abaa48a77e5d47b4540ab434bb436a7d12"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "add(address)",
          "remove(address)",
          "has(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "RolesMock",
              "label": "dummyRole",
              "type": "t_struct(Role)1187_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\RolesMock.sol:8"
            }
          ],
          "types": {
            "t_struct(Role)1187_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20NoReturnMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:66",
        "version": {
          "withMetadata": "67e5e94b75a6c106858dea0b488f737ee6e6c6da4b3dd71e583d44cb43d40713",
          "withoutMetadata": "a294ffed3a7a058ee0c55019f685a0499971c2c06da4570ef66742ad18c63cf7",
          "linkedWithoutMetadata": "a294ffed3a7a058ee0c55019f685a0499971c2c06da4570ef66742ad18c63cf7"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20NoReturnMock",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:67"
            },
            {
              "contract": "ERC20NoReturnMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:71"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20ReturnFalseMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:7",
        "version": {
          "withMetadata": "3d29e2d34f37852535c65295f834b3c201693e39b645667bcc882ab5bb13460f",
          "withoutMetadata": "5d6f35e1dbd803b5b5c6354b187b63c1a69491145eda567e764289bd78c60062",
          "linkedWithoutMetadata": "5d6f35e1dbd803b5b5c6354b187b63c1a69491145eda567e764289bd78c60062"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20ReturnFalseMock",
              "label": "_allowance",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:8"
            },
            {
              "contract": "ERC20ReturnFalseMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:12"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20ReturnTrueMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:35",
        "version": {
          "withMetadata": "949259e46ca7419cc2385ae60c52235874c06570b04f7935888699adb708d98c",
          "withoutMetadata": "cb0369e99ab9dee46de544d3ee5262dfe13f79f54c10c45be37d6e0a00c9205c",
          "linkedWithoutMetadata": "cb0369e99ab9dee46de544d3ee5262dfe13f79f54c10c45be37d6e0a00c9205c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20ReturnTrueMock",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:36"
            },
            {
              "contract": "ERC20ReturnTrueMock",
              "label": "_dummy",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Wrapper": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:94",
        "version": {
          "withMetadata": "abdcfa989cb21e0d53e43ed235d23f96b9cc4196c7bba77efe91244a31edfb88",
          "withoutMetadata": "20c8db57ba9022ece2edbcaa08635576a4c6d957f653922c263e69093a6190c6",
          "linkedWithoutMetadata": "20c8db57ba9022ece2edbcaa08635576a4c6d957f653922c263e69093a6190c6"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "transfer()",
          "transferFrom()",
          "approve(uint256)",
          "increaseAllowance(uint256)",
          "decreaseAllowance(uint256)",
          "setAllowance(uint256)",
          "allowance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20Wrapper",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:99"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SafeERC20Wrapper",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeERC20Helper.sol:97"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SafeMathMock.sol:5",
        "version": {
          "withMetadata": "392495b701917ed56786262ece94ff0f08391c63981b900a6ab559a7da1c8bf2",
          "withoutMetadata": "0d3e4880e8c349708f6cf91bea2728b3dd8b22da793c936afa1bf4ea568f1f23",
          "linkedWithoutMetadata": "0d3e4880e8c349708f6cf91bea2728b3dd8b22da793c936afa1bf4ea568f1f23"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mul(uint256,uint256)",
          "div(uint256,uint256)",
          "sub(uint256,uint256)",
          "add(uint256,uint256)",
          "mod(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SecondaryMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SecondaryMock.sol:5",
        "version": {
          "withMetadata": "57a241ebfb7549d5f179d703ae1bc384b2ebbc31e0e77821ef4da6b14b11a8ed",
          "withoutMetadata": "b6ab6c0fe273774304b7b616ed48cd829dc838185806e3ce5c3733223be55a5b",
          "linkedWithoutMetadata": "b6ab6c0fe273774304b7b616ed48cd829dc838185806e3ce5c3733223be55a5b"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "onlyPrimaryMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignerRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\SignerRoleMock.sol:5",
        "version": {
          "withMetadata": "275dd3041b60af230712c62fafc6b215e356a234c32ab3b7e81cfe5fd5db30cd",
          "withoutMetadata": "275dd3041b60af230712c62fafc6b215e356a234c32ab3b7e81cfe5fd5db30cd",
          "linkedWithoutMetadata": "275dd3041b60af230712c62fafc6b215e356a234c32ab3b7e81cfe5fd5db30cd"
        },
        "inherit": [
          "SignerRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeSigner(address)",
          "onlySignerMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TimedCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\TimedCrowdsaleImpl.sol:6",
        "version": {
          "withMetadata": "779473a87bf8f735c35421f7eeaa960c222f42b8c400ff26f6294e557c2b29f0",
          "withoutMetadata": "779473a87bf8f735c35421f7eeaa960c222f42b8c400ff26f6294e557c2b29f0",
          "linkedWithoutMetadata": "779473a87bf8f735c35421f7eeaa960c222f42b8c400ff26f6294e557c2b29f0"
        },
        "inherit": [
          "TimedCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,uint256,address payable,address)",
          "extendTime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimedCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\TimedCrowdsaleImpl.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistAdminRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\WhitelistAdminRoleMock.sol:5",
        "version": {
          "withMetadata": "edefc3ee3b21c3816087ed4cb8e8141fea920648d1ed1cd27ebf55591440d399",
          "withoutMetadata": "edefc3ee3b21c3816087ed4cb8e8141fea920648d1ed1cd27ebf55591440d399",
          "linkedWithoutMetadata": "edefc3ee3b21c3816087ed4cb8e8141fea920648d1ed1cd27ebf55591440d399"
        },
        "inherit": [
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "removeWhitelistAdmin(address)",
          "onlyWhitelistAdminMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistCrowdsaleImpl": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\WhitelistCrowdsaleImpl.sol:8",
        "version": {
          "withMetadata": "efb8947ded0e55a114f961bf90dbf47a14366feae95bfc5758ded094d8b70901",
          "withoutMetadata": "efb8947ded0e55a114f961bf90dbf47a14366feae95bfc5758ded094d8b70901",
          "linkedWithoutMetadata": "efb8947ded0e55a114f961bf90dbf47a14366feae95bfc5758ded094d8b70901"
        },
        "inherit": [
          "WhitelistCrowdsale",
          "Crowdsale",
          "ReentrancyGuard",
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address payable,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WhitelistCrowdsaleImpl",
            "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\WhitelistCrowdsaleImpl.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "WhitelistedRoleMock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\mocks\\WhitelistedRoleMock.sol:5",
        "version": {
          "withMetadata": "a2f2bc4149637072b06794170400fdf206d0cac8b862957a143292e524c7651f",
          "withoutMetadata": "a2f2bc4149637072b06794170400fdf206d0cac8b862957a143292e524c7651f",
          "linkedWithoutMetadata": "a2f2bc4149637072b06794170400fdf206d0cac8b862957a143292e524c7651f"
        },
        "inherit": [
          "WhitelistedRole",
          "WhitelistAdminRole",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "onlyWhitelistedMock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Ownable.sol:13",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "isOwner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Ownable.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Ownable.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Secondary": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Secondary.sol:7",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "primary()",
          "transferPrimary(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Secondary",
            "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Secondary.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Secondary",
              "label": "_primary",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\ownership\\Secondary.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PaymentSplitter": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:19",
        "version": {
          "withMetadata": "1b741594591eecc5c8ea0a44688499789b88a106942b8fdedee240544d9917c4",
          "withoutMetadata": "1b741594591eecc5c8ea0a44688499789b88a106942b8fdedee240544d9917c4",
          "linkedWithoutMetadata": "1b741594591eecc5c8ea0a44688499789b88a106942b8fdedee240544d9917c4"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "shares(address)",
          "released(address)",
          "payee(uint256)",
          "release(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PaymentSplitter",
              "label": "_totalShares",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:26"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_totalReleased",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:27"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_shares",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:29"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_released",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:30"
            },
            {
              "contract": "PaymentSplitter",
              "label": "_payees",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PaymentSplitter.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PullPayment": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PullPayment.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawPayments(address payable)",
          "withdrawPaymentsWithGas(address payable)",
          "payments(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PullPayment",
            "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PullPayment.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PullPayment",
              "label": "_escrow",
              "type": "t_contract(Escrow)8531",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\PullPayment.sol:24"
            }
          ],
          "types": {
            "t_contract(Escrow)8531": {
              "label": "contract Escrow"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConditionalEscrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\ConditionalEscrow.sol:10",
        "inherit": [
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Escrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\Escrow.sol:20",
        "version": {
          "withMetadata": "5ba26867201532fba5ddcd66e9c3f97a0aa46ab3c850355ff9669a3a8efadbf0",
          "withoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34",
          "linkedWithoutMetadata": "9a5e92ee31b98da9f53d3e6545900180949e42628e9efaea16c03fd91cb9cb34"
        },
        "inherit": [
          "Secondary",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)",
          "withdrawWithGas(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Escrow",
              "label": "_deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\Escrow.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "RefundEscrow": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\RefundEscrow.sol:16",
        "version": {
          "withMetadata": "5a199b718fd3fd966e7c59bfec6571c6acbe5d39dc702977fca23c9e1cc4a385",
          "withoutMetadata": "5a199b718fd3fd966e7c59bfec6571c6acbe5d39dc702977fca23c9e1cc4a385",
          "linkedWithoutMetadata": "5a199b718fd3fd966e7c59bfec6571c6acbe5d39dc702977fca23c9e1cc4a385"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Secondary",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\RefundEscrow.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RefundEscrow",
              "label": "_state",
              "type": "t_enum(State)8540",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\RefundEscrow.sol:22"
            },
            {
              "contract": "RefundEscrow",
              "label": "_beneficiary",
              "type": "t_address_payable",
              "src": "contracts\\IDO_basedon_Openzeppelin\\payment\\escrow\\RefundEscrow.sol:23"
            }
          ],
          "types": {
            "t_enum(State)8540": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ]
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20.sol:31",
        "version": {
          "withMetadata": "359b1634906d7773c7dde5ddba6294225c2dc96497a466eb8895c81c1e0b06a1",
          "withoutMetadata": "d002861bd2a7fafd3fa88dd948e2d79a4cbee990a42f8a4fb78c61fbb247db0d",
          "linkedWithoutMetadata": "d002861bd2a7fafd3fa88dd948e2d79a4cbee990a42f8a4fb78c61fbb247db0d"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20.sol:38"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Burnable.sol:11",
        "version": {
          "withMetadata": "89b600a95951e47d3f0fd4063f9b08918559a2ee9440612425f4279b83b3c55f",
          "withoutMetadata": "e727391d2078930497d9261274f56ccb8af3132f528be4909c5c77174920ad2f",
          "linkedWithoutMetadata": "e727391d2078930497d9261274f56ccb8af3132f528be4909c5c77174920ad2f"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Capped": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Capped.sol:8",
        "version": {
          "withMetadata": "ca0be55e6a7cde2ffd12a3961b71c01ff16d5f58ede1c7df9bbf8637432be499",
          "withoutMetadata": "ca0be55e6a7cde2ffd12a3961b71c01ff16d5f58ede1c7df9bbf8637432be499",
          "linkedWithoutMetadata": "ca0be55e6a7cde2ffd12a3961b71c01ff16d5f58ede1c7df9bbf8637432be499"
        },
        "inherit": [
          "ERC20Mintable",
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "cap()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Capped",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Capped.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Capped",
              "label": "_cap",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Capped.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Detailed.sol:8",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Detailed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Detailed.sol:9"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Detailed.sol:10"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Detailed.sol:11"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mintable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Mintable.sol:12",
        "version": {
          "withMetadata": "15670fcb6472cbaa7f2e9763d4d315cdf4c3ff079df25cfcca0192f38684cdd7",
          "withoutMetadata": "15670fcb6472cbaa7f2e9763d4d315cdf4c3ff079df25cfcca0192f38684cdd7",
          "linkedWithoutMetadata": "15670fcb6472cbaa7f2e9763d4d315cdf4c3ff079df25cfcca0192f38684cdd7"
        },
        "inherit": [
          "MinterRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\ERC20Pausable.sol:14",
        "version": {
          "withMetadata": "1ca0b89d7d2f1f7a6339c28bc82f53c43074b12c16f611170513c0385b0a42eb",
          "withoutMetadata": "1ca0b89d7d2f1f7a6339c28bc82f53c43074b12c16f611170513c0385b0a42eb",
          "linkedWithoutMetadata": "1ca0b89d7d2f1f7a6339c28bc82f53c43074b12c16f611170513c0385b0a42eb"
        },
        "inherit": [
          "Pausable",
          "PauserRole",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\IERC20.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\SafeERC20.sol:16",
        "version": {
          "withMetadata": "96efa18e93ac2bbde4b2b367730e3648ed63281962c0392502e7bbc725a6d5eb",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TokenTimelock": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\TokenTimelock.sol:14",
        "version": {
          "withMetadata": "1d461cfa6caf20aefd6ddc8567f95a6deb0f658e401ef411d2eae6cb32d00ca5",
          "withoutMetadata": "1d461cfa6caf20aefd6ddc8567f95a6deb0f658e401ef411d2eae6cb32d00ca5",
          "linkedWithoutMetadata": "1d461cfa6caf20aefd6ddc8567f95a6deb0f658e401ef411d2eae6cb32d00ca5"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "token()",
          "beneficiary()",
          "releaseTime()",
          "release()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenTimelock",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\TokenTimelock.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TokenTimelock",
              "label": "_token",
              "type": "t_contract(IERC20)9442",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\TokenTimelock.sol:18"
            },
            {
              "contract": "TokenTimelock",
              "label": "_beneficiary",
              "type": "t_address",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\TokenTimelock.sol:21"
            },
            {
              "contract": "TokenTimelock",
              "label": "_releaseTime",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC20\\TokenTimelock.sol:24"
            }
          ],
          "types": {
            "t_contract(IERC20)9442": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:15",
        "version": {
          "withMetadata": "9911af981abff2dc77f05bcdd12acc14401bd4858067ffa836baa0943f690851",
          "withoutMetadata": "2fcc22ba56e241e54fe023aaccd4b31717e7340e99cfde9e66e83d28fadfda04",
          "linkedWithoutMetadata": "2fcc22ba56e241e54fe023aaccd4b31717e7340e99cfde9e66e83d28fadfda04"
        },
        "inherit": [
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "Counters"
        ],
        "methods": [
          "()",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_tokenOwner",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:25"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "contract": "ERC721",
              "label": "_ownedTokensCount",
              "type": "t_mapping(t_address,t_struct(Counter)3275_storage)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:31"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721.sol:34"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Counter)3275_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_struct(Counter)3275_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Burnable.sol:10",
        "version": {
          "withMetadata": "3d01459ccdefeefe93cfdbc70cc4936578b6dd0b4ce215d0e9b03fa2f262266b",
          "withoutMetadata": "4ff77620beea74e5638a5935168912fc78ff6413fae3c47048fe99fb867e0ac1",
          "linkedWithoutMetadata": "4ff77620beea74e5638a5935168912fc78ff6413fae3c47048fe99fb867e0ac1"
        },
        "inherit": [
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:12",
        "version": {
          "withMetadata": "f6f2535d902c3f67a52e6639f8716b31ed3dc9fc7889f379218180317cbc7fb3",
          "withoutMetadata": "a1d021c87e6f8acb694d798c807ea7bb6fc2abb8aebb32b7639ef9d74a8c8e0a",
          "linkedWithoutMetadata": "a1d021c87e6f8acb694d798c807ea7bb6fc2abb8aebb32b7639ef9d74a8c8e0a"
        },
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Enumerable",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:14"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:17"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:20"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Enumerable.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Full": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Full.sol:14",
        "version": {
          "withMetadata": "9d32673dd8fa9487e07625ac6931b929bfb4994167eac42b0889132810b8360f",
          "withoutMetadata": "784c502bb062fdf481d9271f7065d37975bd7f89fc5cc60ee9f5777a5489c3d6",
          "linkedWithoutMetadata": "784c502bb062fdf481d9271f7065d37975bd7f89fc5cc60ee9f5777a5489c3d6"
        },
        "inherit": [
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Full",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Full.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Holder": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Holder.sol:5",
        "version": {
          "withMetadata": "f03df5479b9e55e919c4e97629abc213a30dc1a595319f29767c699f0b1e38c7",
          "withoutMetadata": "41696ee38da8debe45d8232860718a7c6f4e6fa6e2963c19e2aea8caded6a969",
          "linkedWithoutMetadata": "41696ee38da8debe45d8232860718a7c6f4e6fa6e2963c19e2aea8caded6a969"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Metadata": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:8",
        "version": {
          "withMetadata": "8437748bea43c8d84ab1e623cf591faf304f5fb011d2b3fe47d7ae80d84fff38",
          "withoutMetadata": "28d550ae4eaa9440347c97475a7f5c4f724ca4795d259c5d7a7f15a421aae8a0",
          "linkedWithoutMetadata": "28d550ae4eaa9440347c97475a7f5c4f724ca4795d259c5d7a7f15a421aae8a0"
        },
        "inherit": [
          "IERC721Metadata",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Metadata",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Metadata",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:10"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:13"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_baseURI",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:16"
            },
            {
              "contract": "ERC721Metadata",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Metadata.sol:19"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721MetadataMintable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721MetadataMintable.sol:11",
        "inherit": [
          "MinterRole",
          "ERC721Metadata",
          "IERC721Metadata",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mintWithTokenURI(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Mintable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Mintable.sol:10",
        "version": {
          "withMetadata": "96eb0d9dbf8861e0378f9dbeb0edcea6e64b6083f2d37bdd101d0906288efc64",
          "withoutMetadata": "96eb0d9dbf8861e0378f9dbeb0edcea6e64b6083f2d37bdd101d0906288efc64",
          "linkedWithoutMetadata": "96eb0d9dbf8861e0378f9dbeb0edcea6e64b6083f2d37bdd101d0906288efc64"
        },
        "inherit": [
          "MinterRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Pausable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\ERC721Pausable.sol:10",
        "version": {
          "withMetadata": "d9315df77d4a8ce407a2c99fa435ad0fa7577707fcb92260cb7d57daea575974",
          "withoutMetadata": "d9315df77d4a8ce407a2c99fa435ad0fa7577707fcb92260cb7d57daea575974",
          "linkedWithoutMetadata": "d9315df77d4a8ce407a2c99fa435ad0fa7577707fcb92260cb7d57daea575974"
        },
        "inherit": [
          "Pausable",
          "PauserRole",
          "ERC721",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\IERC721.sol:8",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\IERC721Enumerable.sol:9",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Full": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\IERC721Full.sol:11",
        "inherit": [
          "IERC721Metadata",
          "IERC721Enumerable",
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\IERC721Metadata.sol:9",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC721\\IERC721Receiver.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC777": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:27",
        "version": {
          "withMetadata": "0b5b90f102dcff49c320d12ed06097d10b00352f9aa94fe2b11242c8483f11be",
          "withoutMetadata": "90303baeada0929851a786ddd71fa2871e944f90aafc495c82223d338ac7c7b6",
          "linkedWithoutMetadata": "90303baeada0929851a786ddd71fa2871e944f90aafc495c82223d338ac7c7b6"
        },
        "inherit": [
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,address[])",
          "name()",
          "symbol()",
          "decimals()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "transfer(address,uint256)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777",
            "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC777",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:33"
            },
            {
              "contract": "ERC777",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "contract": "ERC777",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "contract": "ERC777",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:38"
            },
            {
              "contract": "ERC777",
              "label": "_defaultOperatorsArray",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:52"
            },
            {
              "contract": "ERC777",
              "label": "_defaultOperators",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:55"
            },
            {
              "contract": "ERC777",
              "label": "_operators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:58"
            },
            {
              "contract": "ERC777",
              "label": "_revokedDefaultOperators",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:59"
            },
            {
              "contract": "ERC777",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\ERC777.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC777": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\IERC777.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC777Recipient": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\IERC777Recipient.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC777Sender": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\token\\ERC777\\IERC777Sender.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\Address.sol:6",
        "version": {
          "withMetadata": "8229f69a3dc42dfa2268b6633a0b2d66ee893bfba88e23d314290ea3d19da0ad",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\Arrays.sol:8",
        "version": {
          "withMetadata": "53da98acc694698c7a6ddf4f2c8bbf70415d388b10fa8a32abf0169c5b971dfe",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Create2": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\Create2.sol:14",
        "version": {
          "withMetadata": "b8e58a54e0431040fbdfe17168283c4188e10568c5f8cff7bbc60ff953fb6ed6",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\ReentrancyGuard.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_notEntered",
              "type": "t_bool",
              "src": "contracts\\IDO_basedon_Openzeppelin\\utils\\ReentrancyGuard.sol:23"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "PancakeERC20": {
        "src": "contracts\\core\\PancakeERC20.sol:6",
        "version": {
          "withMetadata": "4518b5cbb93b6127c5eb6a2415242dad60449aab17aeb9c4b4a78c2f5e5dab91",
          "withoutMetadata": "4518b5cbb93b6127c5eb6a2415242dad60449aab17aeb9c4b4a78c2f5e5dab91",
          "linkedWithoutMetadata": "4518b5cbb93b6127c5eb6a2415242dad60449aab17aeb9c4b4a78c2f5e5dab91"
        },
        "inherit": [
          "IPancakeERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeERC20",
            "src": "contracts\\core\\PancakeERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts\\core\\PancakeERC20.sol:12"
            },
            {
              "contract": "PancakeERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\core\\PancakeERC20.sol:13"
            },
            {
              "contract": "PancakeERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\core\\PancakeERC20.sol:14"
            },
            {
              "contract": "PancakeERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\core\\PancakeERC20.sol:16"
            },
            {
              "contract": "PancakeERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\core\\PancakeERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeFactory": {
        "src": "contracts\\core\\PancakeFactory.sol:6",
        "version": {
          "withMetadata": "e399438d2ea2689128998ed411b708558e1146fbac6881bd28ffd9668bc49a54",
          "withoutMetadata": "73f32da93714b1754a0c7383805c13ef0b5dddaa533b18c5ed23c117d2bac9ac",
          "linkedWithoutMetadata": "73f32da93714b1754a0c7383805c13ef0b5dddaa533b18c5ed23c117d2bac9ac"
        },
        "inherit": [
          "IPancakeFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeFactory",
            "src": "contracts\\core\\PancakeFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeFactory",
              "label": "feeTo",
              "type": "t_address",
              "src": "contracts\\core\\PancakeFactory.sol:9"
            },
            {
              "contract": "PancakeFactory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts\\core\\PancakeFactory.sol:10"
            },
            {
              "contract": "PancakeFactory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\core\\PancakeFactory.sol:12"
            },
            {
              "contract": "PancakeFactory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\core\\PancakeFactory.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakePair": {
        "src": "contracts\\core\\PancakePair.sol:11",
        "version": {
          "withMetadata": "c5bc940b7021a42041dea0d466b8605b0a332e466940d2cb654c3c55c1dee94a",
          "withoutMetadata": "c5bc940b7021a42041dea0d466b8605b0a332e466940d2cb654c3c55c1dee94a",
          "linkedWithoutMetadata": "c5bc940b7021a42041dea0d466b8605b0a332e466940d2cb654c3c55c1dee94a"
        },
        "inherit": [
          "PancakeERC20",
          "IPancakeERC20",
          "IPancakePair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakePair",
            "src": "contracts\\core\\PancakePair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\core\\PancakePair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakePair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts\\core\\PancakePair.sol:18"
            },
            {
              "contract": "PancakePair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts\\core\\PancakePair.sol:19"
            },
            {
              "contract": "PancakePair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts\\core\\PancakePair.sol:20"
            },
            {
              "contract": "PancakePair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts\\core\\PancakePair.sol:22"
            },
            {
              "contract": "PancakePair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts\\core\\PancakePair.sol:23"
            },
            {
              "contract": "PancakePair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\core\\PancakePair.sol:24"
            },
            {
              "contract": "PancakePair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\core\\PancakePair.sol:26"
            },
            {
              "contract": "PancakePair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\core\\PancakePair.sol:27"
            },
            {
              "contract": "PancakePair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts\\core\\PancakePair.sol:28"
            },
            {
              "contract": "PancakePair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\core\\PancakePair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\core\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeCallee": {
        "src": "contracts\\core\\interfaces\\IPancakeCallee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pancakeCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeERC20": {
        "src": "contracts\\core\\interfaces\\IPancakeERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeFactory": {
        "src": "contracts\\core\\interfaces\\IPancakeFactory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakePair": {
        "src": "contracts\\core\\interfaces\\IPancakePair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\core\\libraries\\Math.sol:5",
        "version": {
          "withMetadata": "bbe83cb770346f1da47649e1628ebb7885afec189bfa256d973f4bab50e41a0a",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\core\\libraries\\SafeMath.sol:5",
        "version": {
          "withMetadata": "aa6fc2c025a352ac702aa1d5ced6dccb16dfa1e08e833daa56ac128982ab0425",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\core\\libraries\\UQ112x112.sol:8",
        "version": {
          "withMetadata": "a636d124115f7b388fedb2935f36ffc54fc2fb83ef8b73ec0f8bfcc1c0ebe70d",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}